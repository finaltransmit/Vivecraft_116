--- a/net/optifine/util/StrUtils.java
+++ b/net/optifine/util/StrUtils.java
@@ -418,15 +418,15 @@
         }
         else
         {
-            StringBuffer stringbuffer = new StringBuffer();
+            StringBuilder stringbuilder = new StringBuilder();
             int i = len - s.length();
 
-            while (stringbuffer.length() < i)
+            while (stringbuilder.length() < i)
             {
-                stringbuffer.append(fillChar);
+                stringbuilder.append(fillChar);
             }
 
-            return stringbuffer.toString() + s;
+            return stringbuilder.toString() + s;
         }
     }
 
@@ -443,14 +443,14 @@
         }
         else
         {
-            StringBuffer stringbuffer = new StringBuffer(s);
+            StringBuilder stringbuilder = new StringBuilder(s);
 
-            while (stringbuffer.length() < len)
+            while (stringbuilder.length() < len)
             {
-                stringbuffer.append(fillChar);
+                stringbuilder.append(fillChar);
             }
 
-            return stringbuffer.toString();
+            return stringbuilder.toString();
         }
     }
 
@@ -853,4 +853,119 @@
             return str;
         }
     }
+
+    public static String replaceChar(String s, char findChar, char substChar)
+    {
+        StringBuilder stringbuilder = new StringBuilder(s);
+
+        for (int i = 0; i < stringbuilder.length(); ++i)
+        {
+            char c0 = stringbuilder.charAt(i);
+
+            if (c0 == findChar)
+            {
+                stringbuilder.setCharAt(i, substChar);
+            }
+        }
+
+        return stringbuilder.toString();
+    }
+
+    public static String replaceString(String str, String findStr, String substStr)
+    {
+        StringBuilder stringbuilder = new StringBuilder();
+        int i = 0;
+        int oldPos;
+
+        do
+        {
+            oldPos = i;
+            i = str.indexOf(findStr, i);
+
+            if (i >= 0)
+            {
+                stringbuilder.append(str.substring(oldPos, i));
+                stringbuilder.append(substStr);
+                i += findStr.length();
+            }
+        }
+        while (i >= 0);
+
+        stringbuilder.append(str.substring(oldPos));
+        return stringbuilder.toString();
+    }
+
+    public static String replaceStrings(String str, String[] findStrs, String[] substStrs)
+    {
+        if (findStrs.length != substStrs.length)
+        {
+            throw new IllegalArgumentException("Search and replace string arrays have different lengths: findStrs=" + findStrs.length + ", substStrs=" + substStrs.length);
+        }
+        else
+        {
+            StringBuilder stringbuilder = new StringBuilder();
+
+            for (int i = 0; i < findStrs.length; ++i)
+            {
+                String s = findStrs[i];
+
+                if (s.length() > 0)
+                {
+                    char c0 = s.charAt(0);
+
+                    if (indexOf(stringbuilder, c0) < 0)
+                    {
+                        stringbuilder.append(c0);
+                    }
+                }
+            }
+
+            String s1 = stringbuilder.toString();
+            StringBuilder stringbuilder1 = new StringBuilder();
+            int k = 0;
+
+            while (k < str.length())
+            {
+                boolean flag = false;
+                char c1 = str.charAt(k);
+
+                if (s1.indexOf(c1) >= 0)
+                {
+                    for (int j = 0; j < findStrs.length; ++j)
+                    {
+                        if (str.startsWith(findStrs[j], k))
+                        {
+                            stringbuilder1.append(substStrs[j]);
+                            flag = true;
+                            k += findStrs[j].length();
+                            break;
+                        }
+                    }
+                }
+
+                if (!flag)
+                {
+                    stringbuilder1.append(str.charAt(k));
+                    ++k;
+                }
+            }
+
+            return stringbuilder1.toString();
+        }
+    }
+
+    private static int indexOf(StringBuilder buf, char ch)
+    {
+        for (int i = 0; i < buf.length(); ++i)
+        {
+            char c0 = buf.charAt(i);
+
+            if (c0 == ch)
+            {
+                return i;
+            }
+        }
+
+        return -1;
+    }
 }
