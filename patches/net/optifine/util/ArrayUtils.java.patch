--- a/net/optifine/util/ArrayUtils.java
+++ b/net/optifine/util/ArrayUtils.java
@@ -30,6 +30,26 @@
         }
     }
 
+    public static boolean contains(int[] arr, int val)
+    {
+        if (arr == null)
+        {
+            return false;
+        }
+        else
+        {
+            for (int i = 0; i < arr.length; ++i)
+            {
+                if (arr[i] == val)
+                {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+
     public static int[] addIntsToArray(int[] intArray, int[] copyFrom)
     {
         if (intArray != null && copyFrom != null)
@@ -103,8 +123,23 @@
         return list.toArray(aobject);
     }
 
+    public static String arrayToString(boolean[] arr)
+    {
+        return arrayToString(arr, ", ");
+    }
+
+    public static String arrayToString(boolean[] arr, int maxLen)
+    {
+        return arrayToString(arr, ", ", maxLen);
+    }
+
     public static String arrayToString(boolean[] arr, String separator)
     {
+        return arrayToString(arr, separator, arr.length);
+    }
+
+    public static String arrayToString(boolean[] arr, String separator, int maxLen)
+    {
         if (arr == null)
         {
             return "";
@@ -112,12 +147,13 @@
         else
         {
             StringBuffer stringbuffer = new StringBuffer(arr.length * 5);
+            int i = Math.min(arr.length, maxLen);
 
-            for (int i = 0; i < arr.length; ++i)
+            for (int j = 0; j < i; ++j)
             {
-                boolean flag = arr[i];
+                boolean flag = arr[j];
 
-                if (i > 0)
+                if (j > 0)
                 {
                     stringbuffer.append(separator);
                 }
@@ -394,4 +430,25 @@
             return aint;
         }
     }
+
+    public static boolean[] newBoolean(int len, boolean val)
+    {
+        boolean[] aboolean = new boolean[len];
+        Arrays.fill(aboolean, val);
+        return aboolean;
+    }
+
+    public static int[] newInt(int len, int val)
+    {
+        int[] aint = new int[len];
+        Arrays.fill(aint, val);
+        return aint;
+    }
+
+    public static Object[] newObject(int len, Object val)
+    {
+        Object[] aobject = (Object[]) Array.newInstance(val.getClass(), len);
+        Arrays.fill(aobject, val);
+        return aobject;
+    }
 }
