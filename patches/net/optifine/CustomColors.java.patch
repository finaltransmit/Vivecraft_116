--- a/net/optifine/CustomColors.java
+++ b/net/optifine/CustomColors.java
@@ -105,6 +105,7 @@
     private static float[][] sheepColors = (float[][])null;
     private static int[] textColors = null;
     private static int[] mapColorsOriginal = null;
+    private static float[][] dyeColorsOriginal = (float[][])null;
     private static int[] potionColors = null;
     private static final BlockState BLOCK_STATE_DIRT = Blocks.DIRT.getDefaultState();
     private static final BlockState BLOCK_STATE_WATER = Blocks.WATER.getDefaultState();
@@ -205,6 +206,7 @@
         sheepColors = (float[][])null;
         textColors = null;
         setMapColors(mapColorsOriginal);
+        setDyeColors(dyeColorsOriginal);
         potionColors = null;
         paletteFormatDefault = getValidProperty("optifine/color.properties", "palette.format", CustomColormap.FORMAT_STRINGS, "vanilla");
         String s = "optifine/colormap/";
@@ -448,6 +450,18 @@
                 setMapColors(aint);
             }
 
+            float[][] afloat = readDyeColors(properties, fileName, "dye.", "Dye");
+
+            if (afloat != null)
+            {
+                if (dyeColorsOriginal == null)
+                {
+                    dyeColorsOriginal = getDyeColors();
+                }
+
+                setDyeColors(afloat);
+            }
+
             potionColors = readPotionColors(properties, fileName, "potion.", "Potion");
             xpOrbTime = Config.parseInt(properties.getProperty("xporb.time"), -1);
         }
@@ -1150,9 +1164,12 @@
                 int i1 = particleWaterColor >> 16 & 255;
                 int j1 = particleWaterColor >> 8 & 255;
                 int k1 = particleWaterColor & 255;
-                f *= (float)i1 / 255.0F;
-                f1 *= (float)j1 / 255.0F;
-                f2 *= (float)k1 / 255.0F;
+                f = (float)i1 / 255.0F;
+                f1 = (float)j1 / 255.0F;
+                f2 = (float)k1 / 255.0F;
+                f = f * ((float)i1 / 255.0F);
+                f1 = f1 * ((float)j1 / 255.0F);
+                f2 = f2 * ((float)k1 / 255.0F);
             }
 
             fx.setColor(f, f1, f2);
@@ -1720,6 +1737,7 @@
         else
         {
             name = StrUtils.replacePrefix(name, "potion.", "effect.");
+            String s = StrUtils.replacePrefix(name, "effect.", "effect.minecraft.");
 
             for (ResourceLocation resourcelocation : Registry.EFFECTS.keySet())
             {
@@ -1729,6 +1747,11 @@
                 {
                     return Effect.getId(effect);
                 }
+
+                if (effect.getName().equals(s))
+                {
+                    return Effect.getId(effect);
+                }
             }
 
             return -1;
@@ -1842,7 +1865,7 @@
         {
             return MaterialColor.EMERALD.colorIndex;
         }
-        else if (name.equals("podzol"))
+        else if (name.equals("obsidian"))
         {
             return MaterialColor.OBSIDIAN.colorIndex;
         }
@@ -1876,37 +1899,132 @@
                     {
                         return MaterialColor.GRAY.colorIndex;
                     }
-                    else if (name.equals("silver"))
-                    {
-                        return MaterialColor.LIGHT_GRAY.colorIndex;
-                    }
-                    else if (name.equals("cyan"))
+                    else if (!name.equals("silver") && !name.equals("light_gray"))
                     {
-                        return MaterialColor.CYAN.colorIndex;
-                    }
-                    else if (name.equals("purple"))
-                    {
-                        return MaterialColor.PURPLE.colorIndex;
-                    }
-                    else if (name.equals("blue"))
-                    {
-                        return MaterialColor.BLUE.colorIndex;
-                    }
-                    else if (name.equals("brown"))
-                    {
-                        return MaterialColor.BROWN.colorIndex;
-                    }
-                    else if (name.equals("green"))
-                    {
-                        return MaterialColor.GREEN.colorIndex;
-                    }
-                    else if (name.equals("red"))
-                    {
-                        return MaterialColor.RED.colorIndex;
+                        if (name.equals("cyan"))
+                        {
+                            return MaterialColor.CYAN.colorIndex;
+                        }
+                        else if (name.equals("purple"))
+                        {
+                            return MaterialColor.PURPLE.colorIndex;
+                        }
+                        else if (name.equals("blue"))
+                        {
+                            return MaterialColor.BLUE.colorIndex;
+                        }
+                        else if (name.equals("brown"))
+                        {
+                            return MaterialColor.BROWN.colorIndex;
+                        }
+                        else if (name.equals("green"))
+                        {
+                            return MaterialColor.GREEN.colorIndex;
+                        }
+                        else if (name.equals("red"))
+                        {
+                            return MaterialColor.RED.colorIndex;
+                        }
+                        else if (name.equals("black"))
+                        {
+                            return MaterialColor.BLACK.colorIndex;
+                        }
+                        else if (name.equals("white_terracotta"))
+                        {
+                            return MaterialColor.WHITE_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("orange_terracotta"))
+                        {
+                            return MaterialColor.ORANGE_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("magenta_terracotta"))
+                        {
+                            return MaterialColor.MAGENTA_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("light_blue_terracotta"))
+                        {
+                            return MaterialColor.LIGHT_BLUE_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("yellow_terracotta"))
+                        {
+                            return MaterialColor.YELLOW_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("lime_terracotta"))
+                        {
+                            return MaterialColor.LIME_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("pink_terracotta"))
+                        {
+                            return MaterialColor.PINK_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("gray_terracotta"))
+                        {
+                            return MaterialColor.GRAY_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("light_gray_terracotta"))
+                        {
+                            return MaterialColor.LIGHT_GRAY_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("cyan_terracotta"))
+                        {
+                            return MaterialColor.CYAN_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("purple_terracotta"))
+                        {
+                            return MaterialColor.PURPLE_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("blue_terracotta"))
+                        {
+                            return MaterialColor.BLUE_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("brown_terracotta"))
+                        {
+                            return MaterialColor.BROWN_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("green_terracotta"))
+                        {
+                            return MaterialColor.GREEN_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("red_terracotta"))
+                        {
+                            return MaterialColor.RED_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("black_terracotta"))
+                        {
+                            return MaterialColor.BLACK_TERRACOTTA.colorIndex;
+                        }
+                        else if (name.equals("crimson_nylium"))
+                        {
+                            return MaterialColor.CRIMSON_NYLIUM.colorIndex;
+                        }
+                        else if (name.equals("crimson_stem"))
+                        {
+                            return MaterialColor.CRIMSON_STEM.colorIndex;
+                        }
+                        else if (name.equals("crimson_hyphae"))
+                        {
+                            return MaterialColor.CRIMSON_HYPHAE.colorIndex;
+                        }
+                        else if (name.equals("warped_nylium"))
+                        {
+                            return MaterialColor.WARPED_NYLIUM.colorIndex;
+                        }
+                        else if (name.equals("warped_stem"))
+                        {
+                            return MaterialColor.WARPED_STEM.colorIndex;
+                        }
+                        else if (name.equals("warped_hyphae"))
+                        {
+                            return MaterialColor.WARPED_HYPHAE.colorIndex;
+                        }
+                        else
+                        {
+                            return name.equals("warped_wart_block") ? MaterialColor.WARPED_WART.colorIndex : -1;
+                        }
                     }
                     else
                     {
-                        return name.equals("black") ? MaterialColor.BLACK.colorIndex : -1;
+                        return MaterialColor.LIGHT_GRAY.colorIndex;
                     }
                 }
                 else
@@ -1949,7 +2067,6 @@
         if (colors != null)
         {
             MaterialColor[] amaterialcolor = MaterialColor.COLORS;
-            boolean flag = false;
 
             for (int i = 0; i < amaterialcolor.length && i < colors.length; ++i)
             {
@@ -1962,7 +2079,47 @@
                     if (j >= 0 && materialcolor.colorValue != j)
                     {
                         materialcolor.colorValue = j;
-                        flag = true;
+                    }
+                }
+            }
+        }
+    }
+
+    private static float[][] getDyeColors()
+    {
+        DyeColor[] adyecolor = DyeColor.values();
+        float[][] afloat = new float[adyecolor.length][];
+
+        for (int i = 0; i < adyecolor.length && i < afloat.length; ++i)
+        {
+            DyeColor dyecolor = adyecolor[i];
+
+            if (dyecolor != null)
+            {
+                afloat[i] = dyecolor.getColorComponentValues();
+            }
+        }
+
+        return afloat;
+    }
+
+    private static void setDyeColors(float[][] colors)
+    {
+        if (colors != null)
+        {
+            DyeColor[] adyecolor = DyeColor.values();
+
+            for (int i = 0; i < adyecolor.length && i < colors.length; ++i)
+            {
+                DyeColor dyecolor = adyecolor[i];
+
+                if (dyecolor != null)
+                {
+                    float[] afloat = colors[i];
+
+                    if (afloat != null && !dyecolor.getColorComponentValues().equals(afloat))
+                    {
+                        dyecolor.setColorComponentValues(afloat);
                     }
                 }
             }
