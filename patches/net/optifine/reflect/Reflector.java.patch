--- a/net/optifine/reflect/Reflector.java
+++ b/net/optifine/reflect/Reflector.java
@@ -1,19 +1,32 @@
 package net.optifine.reflect;
 
+import com.google.gson.JsonObject;
+import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.blaze3d.matrix.MatrixStack;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.function.Supplier;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import net.minecraft.block.BlockState;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.entity.player.ClientPlayerEntity;
+import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.gui.fonts.FontResourceManager;
+import net.minecraft.client.gui.screen.EnchantmentScreen;
 import net.minecraft.client.gui.screen.MainMenuScreen;
 import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.widget.button.Button;
+import net.minecraft.client.gui.widget.list.ResourcePackList;
+import net.minecraft.client.multiplayer.PlayerController;
 import net.minecraft.client.renderer.ActiveRenderInfo;
 import net.minecraft.client.renderer.BlockModelShapes;
 import net.minecraft.client.renderer.FogRenderer;
@@ -31,24 +44,31 @@
 import net.minecraft.client.renderer.entity.ItemFrameRenderer;
 import net.minecraft.client.renderer.entity.LeashKnotRenderer;
 import net.minecraft.client.renderer.entity.LivingRenderer;
+import net.minecraft.client.renderer.entity.LlamaSpitRenderer;
 import net.minecraft.client.renderer.entity.MinecartRenderer;
 import net.minecraft.client.renderer.entity.PufferfishRenderer;
 import net.minecraft.client.renderer.entity.ShulkerBulletRenderer;
+import net.minecraft.client.renderer.entity.TridentRenderer;
 import net.minecraft.client.renderer.entity.TropicalFishRenderer;
 import net.minecraft.client.renderer.entity.WitherSkullRenderer;
+import net.minecraft.client.renderer.entity.layers.LlamaDecorLayer;
 import net.minecraft.client.renderer.entity.model.ArmorStandModel;
 import net.minecraft.client.renderer.entity.model.BatModel;
+import net.minecraft.client.renderer.entity.model.BeeModel;
 import net.minecraft.client.renderer.entity.model.BlazeModel;
+import net.minecraft.client.renderer.entity.model.BoarModel;
 import net.minecraft.client.renderer.entity.model.BoatModel;
 import net.minecraft.client.renderer.entity.model.BookModel;
 import net.minecraft.client.renderer.entity.model.ChickenModel;
 import net.minecraft.client.renderer.entity.model.CodModel;
 import net.minecraft.client.renderer.entity.model.CreeperModel;
+import net.minecraft.client.renderer.entity.model.DolphinModel;
 import net.minecraft.client.renderer.entity.model.EndermiteModel;
 import net.minecraft.client.renderer.entity.model.EntityModel;
 import net.minecraft.client.renderer.entity.model.EvokerFangsModel;
 import net.minecraft.client.renderer.entity.model.FoxModel;
 import net.minecraft.client.renderer.entity.model.GenericHeadModel;
+import net.minecraft.client.renderer.entity.model.GhastModel;
 import net.minecraft.client.renderer.entity.model.GuardianModel;
 import net.minecraft.client.renderer.entity.model.HorseArmorChestsModel;
 import net.minecraft.client.renderer.entity.model.HorseModel;
@@ -57,6 +77,7 @@
 import net.minecraft.client.renderer.entity.model.IronGolemModel;
 import net.minecraft.client.renderer.entity.model.LeashKnotModel;
 import net.minecraft.client.renderer.entity.model.LlamaModel;
+import net.minecraft.client.renderer.entity.model.LlamaSpitModel;
 import net.minecraft.client.renderer.entity.model.MagmaCubeModel;
 import net.minecraft.client.renderer.entity.model.MinecartModel;
 import net.minecraft.client.renderer.entity.model.OcelotModel;
@@ -76,6 +97,8 @@
 import net.minecraft.client.renderer.entity.model.SnowManModel;
 import net.minecraft.client.renderer.entity.model.SpiderModel;
 import net.minecraft.client.renderer.entity.model.SquidModel;
+import net.minecraft.client.renderer.entity.model.StriderModel;
+import net.minecraft.client.renderer.entity.model.TridentModel;
 import net.minecraft.client.renderer.entity.model.TropicalFishAModel;
 import net.minecraft.client.renderer.entity.model.TropicalFishBModel;
 import net.minecraft.client.renderer.entity.model.TurtleModel;
@@ -89,12 +112,17 @@
 import net.minecraft.client.renderer.model.ModelRenderer;
 import net.minecraft.client.renderer.tileentity.BannerTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.BedTileEntityRenderer;
+import net.minecraft.client.renderer.tileentity.BellTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.ChestTileEntityRenderer;
+import net.minecraft.client.renderer.tileentity.ConduitTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.EnchantmentTableTileEntityRenderer;
+import net.minecraft.client.renderer.tileentity.LecternTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.ShulkerBoxTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.SignTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.SkullTileEntityRenderer;
 import net.minecraft.client.renderer.tileentity.model.DragonHeadModel;
+import net.minecraft.client.resources.DownloadingPackFinder;
+import net.minecraft.client.resources.I18n;
 import net.minecraft.client.resources.LegacyResourcePackWrapper;
 import net.minecraft.client.resources.LegacyResourcePackWrapperV4;
 import net.minecraft.client.settings.KeyBinding;
@@ -105,18 +133,40 @@
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.entity.item.ItemFrameEntity;
+import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
+import net.minecraft.entity.projectile.AbstractArrowEntity;
+import net.minecraft.entity.projectile.DamagingProjectileEntity;
+import net.minecraft.entity.projectile.FishingBobberEntity;
+import net.minecraft.entity.projectile.ThrowableEntity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.FluidState;
+import net.minecraft.inventory.container.Container;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.datasync.DataParameter;
+import net.minecraft.network.play.ServerPlayNetHandler;
+import net.minecraft.resources.IPackNameDecorator;
+import net.minecraft.resources.IReloadableResourceManager;
 import net.minecraft.resources.IResourcePack;
+import net.minecraft.resources.ResourcePackInfo;
+import net.minecraft.resources.ResourcePackInfo.Priority;
+import net.minecraft.resources.data.PackMetadataSection;
+import net.minecraft.tags.ItemTags;
 import net.minecraft.tileentity.BeaconTileEntity;
+import net.minecraft.util.Hand;
+import net.minecraft.util.RegistryKey;
+import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.Session;
+import net.minecraft.util.datafix.codec.DatapackCodec;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
+import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.vector.Matrix4f;
+import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.world.Dimension;
 import net.minecraft.world.IBlockDisplayReader;
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.IWorld;
@@ -125,12 +175,10 @@
 import net.minecraft.world.chunk.IChunk;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.server.Ticket;
+import net.minecraft.world.server.TicketType;
 import net.minecraftforge.eventbus.api.Event;
 import net.optifine.Log;
 import net.optifine.util.ArrayUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 public class Reflector
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -147,7 +195,7 @@
     public static ReflectorMethod ClientModLoader_isLoading = new ReflectorMethod(ClientModLoader, "isLoading");
     public static ReflectorMethod ClientModLoader_renderProgressText = new ReflectorMethod(ClientModLoader, "renderProgressText");
     public static ReflectorClass ChunkDataEvent_Save = new ReflectorClass("net.minecraftforge.event.world.ChunkDataEvent$Save");
-    public static ReflectorConstructor ChunkDataEvent_Save_Constructor = new ReflectorConstructor(ChunkDataEvent_Save, new Class[] {IChunk.class, IWorld.class, CompoundNBT.class});
+    public static ReflectorConstructor ChunkDataEvent_Save_Constructor = new ReflectorConstructor(ChunkDataEvent_Save, new Class[] {IChunk.class, CompoundNBT.class});
     public static ReflectorClass ChunkEvent_Load = new ReflectorClass("net.minecraftforge.event.world.ChunkEvent$Load");
     public static ReflectorConstructor ChunkEvent_Load_Constructor = new ReflectorConstructor(ChunkEvent_Load, new Class[] {IChunk.class});
     public static ReflectorClass ChunkEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.ChunkEvent$Unload");
@@ -210,6 +258,8 @@
     public static ReflectorMethod IForgeFluid_getAttributes = new ReflectorMethod(IForgeFluid, "getAttributes");
     public static ReflectorClass IForgeEntity = new ReflectorClass("net.minecraftforge.common.extensions.IForgeEntity");
     public static ReflectorMethod IForgeEntity_canUpdate = new ReflectorMethod(IForgeEntity, "canUpdate", new Class[0]);
+    public static ReflectorMethod IForgeEntity_getParts = new ReflectorMethod(IForgeEntity, "getParts");
+    public static ReflectorMethod IForgeEntity_isMultipartEntity = new ReflectorMethod(IForgeEntity, "isMultipartEntity");
     public static ReflectorMethod IForgeEntity_onAddedToWorld = new ReflectorMethod(IForgeEntity, "onAddedToWorld");
     public static ReflectorMethod IForgeEntity_onRemovedFromWorld = new ReflectorMethod(IForgeEntity, "onRemovedFromWorld");
     public static ReflectorMethod IForgeEntity_shouldRiderSit = new ReflectorMethod(IForgeEntity, "shouldRiderSit");
@@ -239,6 +289,8 @@
     public static ReflectorMethod ForgeHooks_onLivingSetAttackTarget = new ReflectorMethod(ForgeHooks, "onLivingSetAttackTarget");
     public static ReflectorMethod ForgeHooks_onLivingUpdate = new ReflectorMethod(ForgeHooks, "onLivingUpdate");
     public static ReflectorClass ForgeHooksClient = new ReflectorClass("net.minecraftforge.client.ForgeHooksClient");
+    public static ReflectorMethod ForgeHooksClient_bossBarRenderPre = new ReflectorMethod(ForgeHooksClient, "bossBarRenderPre");
+    public static ReflectorMethod ForgeHooksClient_bossBarRenderPost = new ReflectorMethod(ForgeHooksClient, "bossBarRenderPost");
     public static ReflectorMethod ForgeHooksClient_dispatchRenderLast = new ReflectorMethod(ForgeHooksClient, "dispatchRenderLast", new Class[] {WorldRenderer.class, MatrixStack.class, Float.TYPE, Matrix4f.class, Long.TYPE});
     public static ReflectorMethod ForgeHooksClient_drawItemLayered = new ReflectorMethod(ForgeHooksClient, "drawItemLayered");
     public static ReflectorMethod ForgeHooksClient_drawScreen = new ReflectorMethod(ForgeHooksClient, "drawScreen");
@@ -267,7 +319,7 @@
     public static ReflectorMethod ForgeHooksClient_onScreenshot = new ReflectorMethod(ForgeHooksClient, "onScreenshot");
     public static ReflectorMethod ForgeHooksClient_onTextureStitchedPre = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPre");
     public static ReflectorMethod ForgeHooksClient_onTextureStitchedPost = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPost");
-    public static ReflectorMethod ForgeHooksClient_renderMainMenu = new ReflectorMethod(ForgeHooksClient, "renderMainMenu");
+    public static ReflectorMethod ForgeHooksClient_renderMainMenu = new ReflectorMethod(ForgeHooksClient, "renderMainMenu", new Class[] {MainMenuScreen.class, MatrixStack.class, FontRenderer.class, Integer.TYPE, Integer.TYPE, Integer.TYPE});
     public static ReflectorMethod ForgeHooksClient_renderSpecificFirstPersonHand = new ReflectorMethod(ForgeHooksClient, "renderSpecificFirstPersonHand");
     public static ReflectorMethod ForgeHooksClient_setRenderLayer = new ReflectorMethod(ForgeHooksClient, "setRenderLayer");
     public static ReflectorMethod ForgeHooksClient_shouldCauseReequipAnimation = new ReflectorMethod(ForgeHooksClient, "shouldCauseReequipAnimation");
@@ -302,6 +354,8 @@
     public static ReflectorMethod IForgeItemStack_getHighlightTip = new ReflectorMethod(IForgeItemStack, "getHighlightTip");
     public static ReflectorMethod IForgeItemStack_isShield = new ReflectorMethod(IForgeItemStack, "isShield");
     public static ReflectorMethod IForgeItemStack_readShareTag = new ReflectorMethod(IForgeItemStack, "readShareTag");
+    public static ReflectorClass ForgeItemTags = new ReflectorClass(ItemTags.class);
+    public static ReflectorMethod ForgeItemTags_createOptional = ForgeItemTags.makeMethod("createOptional", new Class[] {ResourceLocation.class});
     public static ReflectorClass ForgeI18n = new ReflectorClass("net.minecraftforge.fml.ForgeI18n");
     public static ReflectorMethod ForgeI18n_loadLanguageData = new ReflectorMethod(ForgeI18n, "loadLanguageData");
     public static ReflectorClass ForgeKeyBinding = new ReflectorClass(KeyBinding.class);
@@ -318,6 +372,7 @@
     public static ReflectorMethod ForgeRenderTypeLookup_canRenderInLayerBs = new ReflectorMethod(ForgeRenderTypeLookup, "canRenderInLayer", new Class[] {BlockState.class, RenderType.class});
     public static ReflectorMethod ForgeRenderTypeLookup_canRenderInLayerFs = new ReflectorMethod(ForgeRenderTypeLookup, "canRenderInLayer", new Class[] {FluidState.class, RenderType.class});
     public static ReflectorClass ForgeTicket = new ReflectorClass(Ticket.class);
+    public static ReflectorConstructor ForgeTicket_Constructor = ForgeTicket.makeConstructor(new Class[] {TicketType.class, Integer.TYPE, Object.class, Boolean.TYPE});
     public static ReflectorMethod ForgeTicket_isForceTicks = ForgeTicket.makeMethod("isForceTicks");
     public static ReflectorClass IForgeTileEntity = new ReflectorClass("net.minecraftforge.common.extensions.IForgeTileEntity");
     public static ReflectorMethod IForgeTileEntity_getRenderBoundingBox = new ReflectorMethod(IForgeTileEntity, "getRenderBoundingBox");
@@ -340,8 +395,9 @@
     public static ReflectorField Launch_blackboard = new ReflectorField(Launch, "blackboard");
     public static ReflectorClass LightUtil = new ReflectorClass("net.minecraftforge.client.model.pipeline.LightUtil");
     public static ReflectorField LightUtil_itemConsumer = new ReflectorField(LightUtil, "itemConsumer");
-    public static ReflectorField LightUtil_tessellator = new ReflectorField(LightUtil, "tessellator");
     public static ReflectorMethod LightUtil_putBakedQuad = new ReflectorMethod(LightUtil, "putBakedQuad");
+    public static ReflectorMethod LightUtil_renderQuadColor = new ReflectorMethod(LightUtil, "renderQuadColor");
+    public static ReflectorField LightUtil_tessellator = new ReflectorField(LightUtil, "tessellator");
     public static ReflectorClass Loader = new ReflectorClass("net.minecraftforge.fml.common.Loader");
     public static ReflectorMethod Loader_getActiveModList = new ReflectorMethod(Loader, "getActiveModList");
     public static ReflectorMethod Loader_instance = new ReflectorMethod(Loader, "instance");
@@ -357,6 +413,7 @@
     public static ReflectorConstructor ModListScreen_Constructor = new ReflectorConstructor(ModListScreen, new Class[] {Screen.class});
     public static ReflectorClass NotificationModUpdateScreen = new ReflectorClass("net.minecraftforge.client.gui.NotificationModUpdateScreen");
     public static ReflectorMethod NotificationModUpdateScreen_init = new ReflectorMethod(NotificationModUpdateScreen, "init", new Class[] {MainMenuScreen.class, Button.class});
+    public static ReflectorClass PartEntity = new ReflectorClass("net.minecraftforge.entity.PartEntity");
     public static ReflectorClass PlaySoundAtEntityEvent = new ReflectorClass("net.minecraftforge.event.entity.PlaySoundAtEntityEvent");
     public static ReflectorMethod PlaySoundAtEntityEvent_getSound = new ReflectorMethod(PlaySoundAtEntityEvent, "getSound");
     public static ReflectorMethod PlaySoundAtEntityEvent_getCategory = new ReflectorMethod(PlaySoundAtEntityEvent, "getCategory");
@@ -365,6 +422,8 @@
     public static ReflectorField RenderBlockOverlayEvent_OverlayType_BLOCK = new ReflectorField(RenderBlockOverlayEvent_OverlayType, "BLOCK");
     public static ReflectorClass RenderingRegistry = new ReflectorClass("net.minecraftforge.fml.client.registry.RenderingRegistry");
     public static ReflectorMethod RenderingRegistry_loadEntityRenderers = new ReflectorMethod(RenderingRegistry, "loadEntityRenderers", new Class[] {EntityRendererManager.class});
+    public static ReflectorClass RenderGameOverlayEvent_BossInfo = new ReflectorClass("net.minecraftforge.client.event.RenderGameOverlayEvent$BossInfo");
+    public static ReflectorMethod RenderGameOverlayEvent_BossInfo_getIncrement = RenderGameOverlayEvent_BossInfo.makeMethod("getIncrement");
     public static ReflectorClass RenderItemInFrameEvent = new ReflectorClass("net.minecraftforge.client.event.RenderItemInFrameEvent");
     public static ReflectorConstructor RenderItemInFrameEvent_Constructor = new ReflectorConstructor(RenderItemInFrameEvent, new Class[] {ItemFrameEntity.class, ItemFrameRenderer.class, MatrixStack.class, IRenderTypeBuffer.class, Integer.TYPE});
     public static ReflectorClass RenderLivingEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Pre");
@@ -388,14 +447,20 @@
     public static ReflectorField EntityItem_ITEM = new ReflectorField(EntityItem, DataParameter.class);
     public static ReflectorClass EnderDragonRenderer = new ReflectorClass(EnderDragonRenderer.class);
     public static ReflectorField EnderDragonRenderer_model = new ReflectorField(EnderDragonRenderer, EnderDragonRenderer.EnderDragonModel.class);
+    public static ReflectorClass GuiEnchantment = new ReflectorClass(EnchantmentScreen.class);
+    public static ReflectorField GuiEnchantment_bookModel = new ReflectorField(GuiEnchantment, BookModel.class);
     public static ReflectorClass GuiMainMenu = new ReflectorClass(MainMenuScreen.class);
     public static ReflectorField GuiMainMenu_splashText = new ReflectorField(GuiMainMenu, String.class);
+    public static ReflectorClass I18n = new ReflectorClass(I18n.class);
+    public static ReflectorField I18n_locale = new ReflectorField(I18n, Locale.class);
     public static ReflectorClass ItemOverride = new ReflectorClass(ItemOverride.class);
     public static ReflectorField ItemOverride_mapResourceValues = new ReflectorField(ItemOverride, Map.class);
     public static ReflectorClass LegacyResourcePackWrapper = new ReflectorClass(LegacyResourcePackWrapper.class);
     public static ReflectorField LegacyResourcePackWrapper_pack = new ReflectorField(LegacyResourcePackWrapper, IResourcePack.class);
     public static ReflectorClass LegacyResourcePackWrapperV4 = new ReflectorClass(LegacyResourcePackWrapperV4.class);
     public static ReflectorField LegacyResourcePackWrapperV4_pack = new ReflectorField(LegacyResourcePackWrapperV4, IResourcePack.class);
+    public static ReflectorClass LayerLlamaDecor = new ReflectorClass(LlamaDecorLayer.class);
+    public static ReflectorField LayerLlamaDecor_model = new ReflectorField(LayerLlamaDecor, LlamaModel.class);
     public static ReflectorClass Minecraft = new ReflectorClass(Minecraft.class);
     public static ReflectorField Minecraft_debugFPS = new ReflectorField(new FieldLocatorTypes(Minecraft.class, new Class[] {CrashReport.class}, Integer.TYPE, new Class[] {String.class}, "debugFPS"));
     public static ReflectorField Minecraft_fontResourceManager = new ReflectorField(Minecraft, FontResourceManager.class);
@@ -405,17 +470,28 @@
     public static ReflectorFields ModelArmorStand_ModelRenderers = new ReflectorFields(ModelArmorStand, ModelRenderer.class, 4);
     public static ReflectorClass ModelBat = new ReflectorClass(BatModel.class);
     public static ReflectorFields ModelBat_ModelRenderers = new ReflectorFields(ModelBat, ModelRenderer.class, 6);
+    public static ReflectorClass ModelBoat = new ReflectorClass(BoatModel.class);
+    public static ReflectorField ModelBoat_sides = new ReflectorField(ModelBoat, ModelRenderer[].class, 0);
+    public static ReflectorField ModelBoat_paddles = new ReflectorField(ModelBoat, ModelRenderer[].class, 1);
+    public static ReflectorField ModelBoat_noWater = new ReflectorField(ModelBoat, ModelRenderer.class);
+    public static ReflectorClass ModelBee = new ReflectorClass(BeeModel.class);
+    public static ReflectorFields ModelBee_ModelRenderers = new ReflectorFields(ModelBee, ModelRenderer.class, 10);
     public static ReflectorClass ModelBlaze = new ReflectorClass(BlazeModel.class);
     public static ReflectorField ModelBlaze_blazeHead = new ReflectorField(ModelBlaze, ModelRenderer.class);
     public static ReflectorField ModelBlaze_blazeSticks = new ReflectorField(ModelBlaze, ModelRenderer[].class);
+    public static ReflectorClass ModelBoar = new ReflectorClass(BoarModel.class);
+    public static ReflectorFields ModelBoar_ModelRenderers = new ReflectorFields(ModelBoar, ModelRenderer.class, 9);
     public static ReflectorClass ModelBook = new ReflectorClass(BookModel.class);
     public static ReflectorFields ModelBook_ModelRenderers = new ReflectorFields(ModelBook, ModelRenderer.class, 7);
+    public static ReflectorField ModelBook_bookParts = new ReflectorField(ModelBook, List.class);
     public static ReflectorClass ModelChicken = new ReflectorClass(ChickenModel.class);
     public static ReflectorFields ModelChicken_ModelRenderers = new ReflectorFields(ModelChicken, ModelRenderer.class, 8);
     public static ReflectorClass ModelCod = new ReflectorClass(CodModel.class);
     public static ReflectorFields ModelCod_ModelRenderers = new ReflectorFields(ModelCod, ModelRenderer.class, 7);
     public static ReflectorClass ModelCreeper = new ReflectorClass(CreeperModel.class);
     public static ReflectorFields ModelCreeper_ModelRenderers = new ReflectorFields(ModelCreeper, ModelRenderer.class, 7);
+    public static ReflectorClass ModelDolphin = new ReflectorClass(DolphinModel.class);
+    public static ReflectorField ModelDolphin_body = new ReflectorField(ModelDolphin, ModelRenderer.class, 1);
     public static ReflectorClass ModelDragon = new ReflectorClass(EnderDragonRenderer.EnderDragonModel.class);
     public static ReflectorFields ModelDragon_ModelRenderers = new ReflectorFields(ModelDragon, ModelRenderer.class, 20);
     public static ReflectorClass RenderEnderCrystal = new ReflectorClass(EnderCrystalRenderer.class);
@@ -424,6 +500,9 @@
     public static ReflectorField ModelEnderMite_bodyParts = new ReflectorField(ModelEnderMite, ModelRenderer[].class);
     public static ReflectorClass ModelEvokerFangs = new ReflectorClass(EvokerFangsModel.class);
     public static ReflectorFields ModelEvokerFangs_ModelRenderers = new ReflectorFields(ModelEvokerFangs, ModelRenderer.class, 3);
+    public static ReflectorClass ModelGhast = new ReflectorClass(GhastModel.class);
+    public static ReflectorField ModelGhast_body = new ReflectorField(ModelGhast, ModelRenderer.class);
+    public static ReflectorField ModelGhast_tentacles = new ReflectorField(ModelGhast, ModelRenderer[].class);
     public static ReflectorClass ModelGuardian = new ReflectorClass(GuardianModel.class);
     public static ReflectorField ModelGuardian_body = new ReflectorField(ModelGuardian, ModelRenderer.class, 0);
     public static ReflectorField ModelGuardian_eye = new ReflectorField(ModelGuardian, ModelRenderer.class, 1);
@@ -448,6 +527,8 @@
     public static ReflectorField RenderLeashKnot_leashKnotModel = new ReflectorField(RenderLeashKnot, LeashKnotModel.class);
     public static ReflectorClass ModelLlama = new ReflectorClass(LlamaModel.class);
     public static ReflectorFields ModelLlama_ModelRenderers = new ReflectorFields(ModelLlama, ModelRenderer.class, 8);
+    public static ReflectorClass ModelLlamaSpit = new ReflectorClass(LlamaSpitModel.class);
+    public static ReflectorField ModelLlamaSpit_renderer = new ReflectorField(ModelLlamaSpit, ModelRenderer.class);
     public static ReflectorClass ModelMinecart = new ReflectorClass(MinecartModel.class);
     public static ReflectorField ModelMinecart_sideModels = new ReflectorField(ModelMinecart, ModelRenderer[].class);
     public static ReflectorClass ModelMagmaCube = new ReflectorClass(MagmaCubeModel.class);
@@ -493,6 +574,10 @@
     public static ReflectorClass ModelSquid = new ReflectorClass(SquidModel.class);
     public static ReflectorField ModelSquid_body = new ReflectorField(ModelSquid, ModelRenderer.class);
     public static ReflectorField ModelSquid_tentacles = new ReflectorField(ModelSquid, ModelRenderer[].class);
+    public static ReflectorClass ModelStrider = new ReflectorClass(StriderModel.class);
+    public static ReflectorFields ModelStrider_ModelRenderers = new ReflectorFields(ModelStrider, ModelRenderer.class, 9);
+    public static ReflectorClass ModelTrident = new ReflectorClass(TridentModel.class);
+    public static ReflectorField ModelTrident_tridentRenderer = new ReflectorField(ModelTrident, ModelRenderer.class);
     public static ReflectorClass ModelTropicalFishA = new ReflectorClass(TropicalFishAModel.class);
     public static ReflectorFields ModelTropicalFishA_ModelRenderers = new ReflectorFields(ModelTropicalFishA, ModelRenderer.class, 5);
     public static ReflectorClass ModelTropicalFishB = new ReflectorClass(TropicalFishBModel.class);
@@ -517,6 +602,8 @@
     public static ReflectorField RenderBoat_modelBoat = new ReflectorField(RenderBoat, BoatModel.class);
     public static ReflectorClass RenderEvokerFangs = new ReflectorClass(EvokerFangsRenderer.class);
     public static ReflectorField RenderEvokerFangs_model = new ReflectorField(RenderEvokerFangs, EvokerFangsModel.class);
+    public static ReflectorClass RenderLlamaSpit = new ReflectorClass(LlamaSpitRenderer.class);
+    public static ReflectorField RenderLlamaSpit_model = new ReflectorField(RenderLlamaSpit, LlamaSpitModel.class);
     public static ReflectorClass RenderPufferfish = new ReflectorClass(PufferfishRenderer.class);
     public static ReflectorField RenderPufferfish_modelSmall = new ReflectorField(RenderPufferfish, PufferFishSmallModel.class);
     public static ReflectorField RenderPufferfish_modelMedium = new ReflectorField(RenderPufferfish, PufferFishMediumModel.class);
@@ -525,6 +612,8 @@
     public static ReflectorField RenderMinecart_modelMinecart = new ReflectorField(RenderMinecart, EntityModel.class);
     public static ReflectorClass RenderShulkerBullet = new ReflectorClass(ShulkerBulletRenderer.class);
     public static ReflectorField RenderShulkerBullet_model = new ReflectorField(RenderShulkerBullet, ShulkerBulletModel.class);
+    public static ReflectorClass RenderTrident = new ReflectorClass(TridentRenderer.class);
+    public static ReflectorField RenderTrident_modelTrident = new ReflectorField(RenderTrident, TridentModel.class);
     public static ReflectorClass RenderTropicalFish = new ReflectorClass(TropicalFishRenderer.class);
     public static ReflectorField RenderTropicalFish_modelA = new ReflectorField(RenderTropicalFish, TropicalFishAModel.class);
     public static ReflectorField RenderTropicalFish_modelB = new ReflectorField(RenderTropicalFish, TropicalFishBModel.class);
@@ -536,12 +625,18 @@
     public static ReflectorField TileEntityBedRenderer_headModel = new ReflectorField(TileEntityBedRenderer, ModelRenderer.class, 0);
     public static ReflectorField TileEntityBedRenderer_footModel = new ReflectorField(TileEntityBedRenderer, ModelRenderer.class, 1);
     public static ReflectorField TileEntityBedRenderer_legModels = new ReflectorField(TileEntityBedRenderer, ModelRenderer[].class);
+    public static ReflectorClass TileEntityBellRenderer = new ReflectorClass(BellTileEntityRenderer.class);
+    public static ReflectorField TileEntityBellRenderer_modelRenderer = new ReflectorField(TileEntityBellRenderer, ModelRenderer.class);
     public static ReflectorClass TileEntityBeacon = new ReflectorClass(BeaconTileEntity.class);
     public static ReflectorField TileEntityBeacon_customName = new ReflectorField(TileEntityBeacon, ITextComponent.class);
     public static ReflectorClass TileEntityChestRenderer = new ReflectorClass(ChestTileEntityRenderer.class);
     public static ReflectorFields TileEntityChestRenderer_modelRenderers = new ReflectorFields(TileEntityChestRenderer, ModelRenderer.class, 9);
+    public static ReflectorClass TileEntityConduitRenderer = new ReflectorClass(ConduitTileEntityRenderer.class);
+    public static ReflectorFields TileEntityConduitRenderer_modelRenderers = new ReflectorFields(TileEntityConduitRenderer, ModelRenderer.class, 4);
     public static ReflectorClass TileEntityEnchantmentTableRenderer = new ReflectorClass(EnchantmentTableTileEntityRenderer.class);
     public static ReflectorField TileEntityEnchantmentTableRenderer_modelBook = new ReflectorField(TileEntityEnchantmentTableRenderer, BookModel.class);
+    public static ReflectorClass TileEntityLecternRenderer = new ReflectorClass(LecternTileEntityRenderer.class);
+    public static ReflectorField TileEntityLecternRenderer_modelBook = new ReflectorField(TileEntityLecternRenderer, BookModel.class);
     public static ReflectorClass TileEntityShulkerBoxRenderer = new ReflectorClass(ShulkerBoxTileEntityRenderer.class);
     public static ReflectorField TileEntityShulkerBoxRenderer_model = new ReflectorField(TileEntityShulkerBoxRenderer, ShulkerModel.class);
     public static ReflectorClass TileEntitySignRenderer = new ReflectorClass(SignTileEntityRenderer.class);
@@ -1273,4 +1368,172 @@
         ReflectorResolver.register(iresolvable);
         return true;
     }
+
+   //Vivecraft Additions
+    //Minecraft.java
+    public static ReflectorMethod ForgeHooksClient_invalidateLog4jThreadCache = new ReflectorMethod(ForgeHooksClient, "invalidateLog4jThreadCache");
+    public static ReflectorMethod EarlyProgressVisualization_join = new ReflectorMethod(EarlyProgressVisualization, "join");
+    public static ReflectorMethod ClientModLoader_begin= new ReflectorMethod(ClientModLoader, "begin", new Class[] {Minecraft.class, ResourcePackList.class, IReloadableResourceManager.class, DownloadingPackFinder.class});
+    public static ReflectorMethod ClientModLoader_completeModLoading = new ReflectorMethod(ClientModLoader, "completeModLoading");
+    public static ReflectorClass fml_ModLoader = new ReflectorClass("net.minecraftforge.fml.ModLoader");
+    public static ReflectorMethod fml_ModLoader_get = new ReflectorMethod(fml_ModLoader, "get");
+    public static ReflectorMethod fml_ModLoader_postEvent = new ReflectorMethod(fml_ModLoader, "postEvent"); //todo: fix object 
+    public static ReflectorClass ParticleFactoryRegisterEvent = new ReflectorClass("net.minecraftforge.client.event.ParticleFactoryRegisterEvent");
+    public static ReflectorConstructor ParticleFactoryRegisterEvent_Constructor= new ReflectorConstructor(ParticleFactoryRegisterEvent, new Class[] {}); 
+    public static ReflectorClass ForgeIngameGui = new ReflectorClass("net.minecraftforge.client.gui.ForgeIngameGui");
+    public static ReflectorConstructor ForgeIngameGui_Constructor= new ReflectorConstructor(ForgeIngameGui, new Class[] {Minecraft.class});
+    public static ReflectorField ForgeIngameGui_renderVignette = new ReflectorField(ForgeIngameGui, "renderVignette");
+    public static ReflectorField ForgeIngameGui_renderHelmet = new ReflectorField(ForgeIngameGui, "renderHelmet");
+    public static ReflectorField ForgeIngameGui_renderPortal = new ReflectorField(ForgeIngameGui, "renderPortal");
+    public static ReflectorField ForgeIngameGui_renderCrosshairs = new ReflectorField(ForgeIngameGui, "renderCrosshairs");
+    public static ReflectorClass ForgeItem = new ReflectorClass(Item.class);
+    public static ReflectorMethod ForgeItem_getTags = new ReflectorMethod(ForgeItem, "getTags");
+    public static ReflectorMethod ServerLifecycleHooks_handleExit = new ReflectorMethod(ServerLifecycleHooks, "handleExit", new Class[] {Integer.TYPE});
+    public static ReflectorClass GuiOpenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiOpenEvent");
+    public static ReflectorConstructor GuiOpenEvent_Constructor= new ReflectorConstructor(GuiOpenEvent, new Class[] {Screen.class}); 
+    public static ReflectorMethod GuiOpenEvent_getGui = new ReflectorMethod(GuiOpenEvent, "getGui");
+    public static ReflectorClass BasicEventHooks = new ReflectorClass("net.minecraftforge.fml.hooks.BasicEventHooks");
+    public static ReflectorMethod BasicEventHooks_onRenderTickStart = new ReflectorMethod(BasicEventHooks, "onRenderTickStart", new Class[] {Float.TYPE});
+    public static ReflectorMethod BasicEventHooks_onRenderTickEnd = new ReflectorMethod(BasicEventHooks, "onRenderTickEnd", new Class[] {Float.TYPE});
+    public static ReflectorMethod BasicEventHooks_onPreClientTick = new ReflectorMethod(BasicEventHooks, "onPreClientTick");
+    public static ReflectorMethod BasicEventHooks_onPostClientTick = new ReflectorMethod(BasicEventHooks, "onPostClientTick");
+    public static ReflectorMethod ForgeHooksClient_OnClickInput = new ReflectorMethod(ForgeHooksClient, "onClickInput");
+    public static ReflectorClass InputEvent = new ReflectorClass("net.minecraftforge.client.event.InputEvent");
+    public static ReflectorClass ClickInputEvent = new ReflectorClass("net.minecraftforge.client.event.InputEvent$ClickInputEvent");
+    public static ReflectorMethod ClickInputEvent_shouldSwingHand = new ReflectorMethod(ClickInputEvent, "shouldSwingHand");
+    public static ReflectorMethod ForgeHooks_onEmptyLeftClick = new ReflectorMethod(ForgeHooks, "onEmptyLeftClick");
+    public static ReflectorMethod ForgeHooks_onEmptyClick = new ReflectorMethod(ForgeHooks, "onEmptyClick");
+    public static ReflectorMethod ForgeHooks_onPickBlock = new ReflectorMethod(ForgeHooks, "onPickBlock");
+    public static ReflectorClass fml_StartupQuery = new ReflectorClass("net.minecraftforge.fml.StartupQuery");
+    public static ReflectorMethod fml_StartupQuery_check = new ReflectorMethod(fml_StartupQuery, "check");
+    public static ReflectorClass ForgeSession = new ReflectorClass(Session.class);
+    public static ReflectorMethod ForgeSession_hasCachedProperties = new ReflectorMethod(ForgeSession, "hasCachedProperties");
+    public static ReflectorMethod ForgeSession_setProperties = new ReflectorMethod(ForgeSession, "setProperties", new Class[] {PropertyMap.class});
+    public static ReflectorClass WorldEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Unload");
+    public static ReflectorConstructor WorldEvent_Unload_Constructor = new ReflectorConstructor(WorldEvent_Unload, new Class[] {IWorld.class});
+    public static ReflectorMethod ClientHooks_firePlayerLogout = new ReflectorMethod(ClientHooks, "firePlayerLogout", new Class[] {PlayerController.class, ClientPlayerEntity.class});
+    public static ReflectorMethod ClientHooks_handleClientWorldClosing = new ReflectorMethod(ClientHooks, "handleClientWorldClosing");
+    public static ReflectorMethod MinecraftForgeClient_clearRenderCache = new ReflectorMethod(MinecraftForgeClient, "clearRenderCache");  
+    public static ReflectorClass ForgeDimension = new ReflectorClass(Dimension.class);
+    public static ReflectorMethod Dimension_getMusicType = new ReflectorMethod(ForgeDimension, "getMusicType");
+    public static ReflectorClass IForgeResourcePack = new ReflectorClass("net.minecraftforge.common.extensions.IForgeResourcePack");
+    public static ReflectorMethod IForgeIResourcePack_isHidden = new ReflectorMethod(IForgeResourcePack, "isHidden");  
+    public static ReflectorClass ClientResourcePackInfo = new ReflectorClass(ResourcePackInfo.class);
+    public static ReflectorConstructor ClientResourcePackInfo_Constructor = new ReflectorConstructor(ClientResourcePackInfo, new Class[] {String.class, Boolean.TYPE, Supplier.class, IResourcePack.class, PackMetadataSection.class, Priority.class, IPackNameDecorator.class, Boolean.TYPE });
+    public static ReflectorClass ForgeDatapackCodec = new ReflectorClass(DatapackCodec.class);
+    public static ReflectorMethod DatapackCodec_addModPacks = new ReflectorMethod(ForgeDatapackCodec, "addModPacks");  
+    public static ReflectorMethod ForgeHooks_getModPacks = new ReflectorMethod(ForgeHooks, "getModPacks");  
+
+    //ServerPlayNetHandler   
+    public static ReflectorClass ForgeMod = new ReflectorClass("net.minecraftforge.common.ForgeMod");
+    public static ReflectorField ForgeMod_REACH_DISTANCE = new ReflectorField(ForgeMod, "REACH_DISTANCE"); 
+
+    public static ReflectorClass RegistryObject = new ReflectorClass("net.minecraftforge.fml.RegistryObject");
+    public static ReflectorMethod RegistryObject_get = new ReflectorMethod(RegistryObject, "get"); 
+
+    public static ReflectorMethod ForgeHooks_newChatWithLinks = new ReflectorMethod(ForgeHooks, "newChatWithLinks", new Class[] {String.class});  
+    public static ReflectorMethod ForgeHooks_onServerChatEvent = new ReflectorMethod(ForgeHooks, "onServerChatEvent", new Class[] {ServerPlayNetHandler.class, String.class, ITextComponent.class});  
+    public static ReflectorMethod ForgeHooks_onInteractEntityAt = new ReflectorMethod(ForgeHooks, "onInteractEntityAt", new Class[] {PlayerEntity.class, Entity.class, Vector3d.class, Hand.class});  
+    public static ReflectorClass NetworkHooks = new ReflectorClass("net.minecraftforge.fml.network.NetworkHooks");
+    public static ReflectorMethod NetworkHooks_onCustomPayload = new ReflectorMethod(NetworkHooks, "onCustomPayload");  
+    
+    //SeverPlayerEntity
+    public static ReflectorMethod ForgeHooks_onTravelToDimension = new ReflectorMethod(ForgeHooks, "onTravelToDimension");
+    public static ReflectorClass ServerWorld = new ReflectorClass(ServerWorld.class);
+    public static ReflectorMethod ServerWorld_removePlayer = new ReflectorMethod(ServerWorld,"removePlayer", new Class[] {ServerPlayerEntity.class, Boolean.TYPE});
+    public static ReflectorMethod ServerWorld_removeEntity = new ReflectorMethod(ServerWorld,"removeEntity", new Class[] {Entity.class, Boolean.TYPE});
+    public static ReflectorClass Entity = new ReflectorClass(Entity.class);
+    public static ReflectorMethod Entity_revive = new ReflectorMethod(Entity,"revive");
+    public static ReflectorMethod ForgeDimension_getMovementFactor = new ReflectorMethod(ForgeDimension,"getMovementFactor");
+    public static ReflectorMethod BasicEventHooks_firePlayerChangedDimensionEvent = new ReflectorMethod(BasicEventHooks,"firePlayerChangedDimensionEvent");  
+    public static ReflectorClass PlayerContainerEvent_Open = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Open");
+    public static ReflectorConstructor PlayerContainerEvent_Open_Constructor = new ReflectorConstructor(PlayerContainerEvent_Open, new Class[] {PlayerEntity.class, Container.class});
+    public static ReflectorClass PlayerContainerEvent_Close = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Close");
+    public static ReflectorConstructor PlayerContainerEvent_Close_Constructor = new ReflectorConstructor(PlayerContainerEvent_Close, new Class[] {PlayerEntity.class, Container.class});
+    public static ReflectorMethod Entity_getPersistentData = new ReflectorMethod(Entity,"getPersistentData");
+    public static ReflectorMethod ForgeEventFactory_onPlayerClone = new ReflectorMethod(ForgeEventFactory,"onPlayerClone");
+    public static ReflectorMethod Entity_captureDrops = new ReflectorMethod(Entity,"captureDrops", new Class[] {});
+    public static ReflectorMethod ForgeEventFactory_onPlayerSleepInBed= new ReflectorMethod(ForgeEventFactory, "onPlayerSleepInBed");
+    public static ReflectorMethod ForgeEventFactory_fireSleepingTimeCheck= new ReflectorMethod(ForgeEventFactory, "fireSleepingTimeCheck");
+    public static ReflectorMethod ForgeEventFactory_onPlayerSpawnSet= new ReflectorMethod(ForgeEventFactory, "onPlayerSpawnSet");
+    public static ReflectorClass CClientSettingsPacket = new ReflectorClass(net.minecraft.network.play.client.CClientSettingsPacket.class);
+    public static ReflectorMethod CClientSettingsPacket_getLanguage = new ReflectorMethod(CClientSettingsPacket, "getLanguage");
+
+    //ClientPlayerEntity
+    public static ReflectorMethod ForgeHooks_onPlayerAttack = new ReflectorMethod(ForgeHooks, "onPlayerAttack");
+    public static ReflectorMethod ForgeHooksClient_onInputUpdate = new ReflectorMethod(ForgeHooksClient, "onInputUpdate");
+    public static ReflectorMethod IForgeItemStack_canElytraFly= new ReflectorMethod(IForgeItemStack, "canElytraFly");
+
+    //ClientPlayNetHandler
+    public static ReflectorMethod ClientHooks_firePlayerLogin = new ReflectorMethod(ClientHooks, "firePlayerLogin");
+    public static ReflectorMethod NetworkHooks_sendMCRegistryPackets = new ReflectorMethod(NetworkHooks,"sendMCRegistryPackets");
+    public static ReflectorMethod IForgeTileEntity_handleUpdateTag = new ReflectorMethod(IForgeTileEntity, "handleUpdateTag");
+    public static ReflectorMethod IForgeTileEntity_onDataPacket= new ReflectorMethod(IForgeTileEntity, "onDataPacket");
+    public static ReflectorMethod ForgeEventFactory_onClientChat = new ReflectorMethod(ForgeEventFactory, "onClientChat");
+    public static ReflectorMethod ClientHooks_firePlayerRespawn= new ReflectorMethod(ClientHooks, "firePlayerRespawn");
+    public static ReflectorMethod ForgeHooksClient_onRecipesUpdated = new ReflectorMethod(ForgeHooksClient, "onRecipesUpdated");
+    public static ReflectorClass CraftingHelper = new ReflectorClass("net.minecraftforge.common.crafting.CraftingHelper");
+    public static ReflectorMethod CraftingHelper_processConditions = new ReflectorMethod(CraftingHelper, "processConditions", new Class[] {JsonObject.class,String.class});
+    public static ReflectorMethod NetworkHooks_isVanillaConnection = new ReflectorMethod(NetworkHooks, "isVanillaConnection");
+    public static ReflectorClass ForgeTagHandler = new ReflectorClass("net.minecraftforge.common.ForgeTagHandler");
+    public static ReflectorMethod ForgeTagHandler_withNoCustom = new ReflectorMethod(ForgeTagHandler, "withNoCustom");
+    public static ReflectorMethod ForgeTagHandler_resetCachedTagCollections = new ReflectorMethod(ForgeTagHandler, "resetCachedTagCollections");
+    public static ReflectorClass TagRegistryManager = new ReflectorClass(net.minecraft.tags.TagRegistryManager.class);
+    public static ReflectorMethod TagRegistryManager_validateVanillaTags = new ReflectorMethod(TagRegistryManager, "validateVanillaTags");
+    public static ReflectorClass ITagCollectionSupplier = new ReflectorClass(net.minecraft.tags.ITagCollectionSupplier.class);
+    public static ReflectorMethod ITagCollectionSupplier_reinjectOptionalTags = new ReflectorMethod(ITagCollectionSupplier, "reinjectOptionalTags");
+
+
+    
+    //Projectiles
+    public static ReflectorMethod ForgeEventFactory_onProjectileImpactD = new ReflectorMethod(ForgeEventFactory, "onProjectileImpact", new Class[] {DamagingProjectileEntity.class, RayTraceResult.class});
+    public static ReflectorMethod ForgeEventFactory_onProjectileImpactV = new ReflectorMethod(ForgeEventFactory, "onProjectileImpact", new Class[] {Entity.class, RayTraceResult.class});
+    public static ReflectorMethod ForgeEventFactory_onProjectileImpactT = new ReflectorMethod(ForgeEventFactory, "onProjectileImpact", new Class[] {ThrowableEntity.class,RayTraceResult.class});
+    public static ReflectorMethod ForgeEventFactory_onProjectileImpactA = new ReflectorMethod(ForgeEventFactory, "onProjectileImpact", new Class[] {AbstractArrowEntity.class,RayTraceResult.class});
+
+    public static ReflectorMethod Entity_remove = new ReflectorMethod(Entity,"remove", new Class[] {Boolean.TYPE});
+    public static ReflectorClass ItemFishedEvent = new ReflectorClass("net.minecraftforge.event.entity.player.ItemFishedEvent");
+    public static ReflectorConstructor ItemFishedEvent_Constructor = new ReflectorConstructor(ItemFishedEvent, new Class[] {List.class, Integer.TYPE, FishingBobberEntity.class});
+    public static ReflectorMethod ItemFishedEvent_getRodDamage = new ReflectorMethod(ItemFishedEvent, "getRodDamage");
+    
+    //Monsters
+    public static ReflectorClass EnderTeleportEvent = new ReflectorClass("net.minecraftforge.event.entity.living.EnderTeleportEvent");
+    public static ReflectorConstructor EnderTeleportEvent_Constructor = new ReflectorConstructor(EnderTeleportEvent, new Class[] {LivingEntity .class, Double.TYPE, Double.TYPE, Double.TYPE, Float.TYPE});
+    public static ReflectorMethod EnderTeleportEvent_getTargetX = new ReflectorMethod(EnderTeleportEvent,"getTargetX");
+    public static ReflectorMethod EnderTeleportEvent_getTargetY = new ReflectorMethod(EnderTeleportEvent,"getTargetY");
+    public static ReflectorMethod EnderTeleportEvent_getTargetZ = new ReflectorMethod(EnderTeleportEvent,"getTargetZ");
+    public static ReflectorMethod ForgeEventFactory_onBlockPlace = new ReflectorMethod(ForgeEventFactory,"onBlockPlace");
+    public static ReflectorClass BlockSnapshot = new ReflectorClass("net.minecraftforge.common.util.BlockSnapshot");
+    public static ReflectorMethod BlockSnapshot_create = new ReflectorMethod(BlockSnapshot, "create", new Class[] {RegistryKey.class,IWorld.class, BlockPos.class});
+    public static ReflectorMethod ForgeItemStack_isEnderMask = new ReflectorMethod(IForgeItemStack, "isEnderMask");
+
+    //butts
+    public static ReflectorMethod IForgeBlockState_getSlipperiness = new ReflectorMethod(IForgeBlockState, "getSlipperiness");
+
+    //moosehelper
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseClickedPre = new ReflectorMethod(ForgeHooksClient, "onGuiMouseClickedPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseClickedPost = new ReflectorMethod(ForgeHooksClient, "onGuiMouseClickedPost");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseReleasedPre = new ReflectorMethod(ForgeHooksClient, "onGuiMouseReleasedPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseReleasedPost = new ReflectorMethod(ForgeHooksClient, "onGuiMouseReleasedPost");
+    public static ReflectorMethod ForgeHooksClient_onRawMouseClicked = new ReflectorMethod(ForgeHooksClient, "onRawMouseClicked");
+    public static ReflectorMethod ForgeHooksClient_fireMouseInput= new ReflectorMethod(ForgeHooksClient, "fireMouseInput");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseScrollPre = new ReflectorMethod(ForgeHooksClient, "onGuiMouseScrollPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseScrollPost = new ReflectorMethod(ForgeHooksClient, "onGuiMouseScrollPost");
+    public static ReflectorMethod ForgeHooksClient_onMouseScroll= new ReflectorMethod(ForgeHooksClient, "onMouseScroll");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseDragPre = new ReflectorMethod(ForgeHooksClient, "onGuiMouseDragPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseDragPost = new ReflectorMethod(ForgeHooksClient, "onGuiMouseDragPost");
+
+    //Screen
+    public static ReflectorClass GuiUtils = new ReflectorClass("net.minecraftforge.fml.client.gui.GuiUtils");
+    public static ReflectorMethod GuiUtils_preItemToolTip = new ReflectorMethod(GuiUtils, "preItemToolTip");
+    public static ReflectorMethod GuiUtils_postItemToolTip = new ReflectorMethod(GuiUtils, "postItemToolTip");
+    public static ReflectorMethod GuiUtils_drawHoveringText = new ReflectorMethod(GuiUtils, "drawHoveringText", new Class[] {MatrixStack.class, List.class, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, FontRenderer.class});
+    public static ReflectorClass BackgroundDrawnEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$BackgroundDrawnEvent");
+    public static ReflectorConstructor BackgroundDrawnEvent_Constructor = new ReflectorConstructor(BackgroundDrawnEvent, new Class[] {Screen.class, MatrixStack.class});
+    public static ReflectorMethod ForgeEventFactory_onClientSendMessage = new ReflectorMethod(ForgeEventFactory, "onClientSendMessage");
+    public static ReflectorClass InitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+    public static ReflectorConstructor InitGuiEvent_Pre_Constructor = new ReflectorConstructor(InitGuiEvent_Pre, new Class[] {Screen.class, List.class, java.util.function.Consumer.class, java.util.function.Consumer.class});
+    public static ReflectorClass InitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+    public static ReflectorConstructor InitGuiEvent_Post_Constructor = new ReflectorConstructor(InitGuiEvent_Post, new Class[] {Screen.class, List.class, java.util.function.Consumer.class, java.util.function.Consumer.class});
+
 }
