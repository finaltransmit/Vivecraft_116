--- a/net/optifine/GlErrors.java
+++ b/net/optifine/GlErrors.java
@@ -1,13 +1,12 @@
 package net.optifine;
 
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+
 public class GlErrors
 {
     private static boolean frameStarted = false;
     private static long timeCheckStartMs = -1L;
-    private static int countErrors = 0;
-    private static int countErrorsSuppressed = 0;
-    private static boolean suppressed = false;
-    private static boolean oneErrorEnabled = false;
+    private static Int2ObjectOpenHashMap<GlErrors.GlError> glErrors = new Int2ObjectOpenHashMap<>();
     private static final long CHECK_INTERVAL_MS = 3000L;
     private static final int CHECK_ERROR_MAX = 10;
 
@@ -15,23 +14,22 @@
     {
         frameStarted = true;
 
-        if (timeCheckStartMs < 0L)
-        {
-            timeCheckStartMs = System.currentTimeMillis();
-        }
-
-        if (System.currentTimeMillis() > timeCheckStartMs + 3000L)
+        if (!glErrors.isEmpty())
         {
-            if (countErrorsSuppressed > 0)
+            if (timeCheckStartMs < 0L)
             {
-                Config.error("Suppressed " + countErrors + " OpenGL errors");
+                timeCheckStartMs = System.currentTimeMillis();
             }
 
-            suppressed = countErrors > 10;
-            timeCheckStartMs = System.currentTimeMillis();
-            countErrors = 0;
-            countErrorsSuppressed = 0;
-            oneErrorEnabled = true;
+            if (System.currentTimeMillis() > timeCheckStartMs + 3000L)
+            {
+                for (GlErrors.GlError glerrors$glerror : glErrors.values())
+                {
+                    glerrors$glerror.onFrameStart();
+                }
+
+                timeCheckStartMs = System.currentTimeMillis();
+            }
         }
     }
 
@@ -43,21 +41,67 @@
         }
         else
         {
-            ++countErrors;
+            GlErrors.GlError glerrors$glerror = getGlError(error);
+            return glerrors$glerror.isEnabled();
+        }
+    }
+
+    private static GlErrors.GlError getGlError(int error)
+    {
+        GlErrors.GlError glerrors$glerror = glErrors.get(error);
+
+        if (glerrors$glerror == null)
+        {
+            glerrors$glerror = new GlErrors.GlError(error);
+            glErrors.put(error, glerrors$glerror);
+        }
+
+        return glerrors$glerror;
+    }
+
+    public static class GlError
+    {
+        private int id;
+        private int countErrors = 0;
+        private int countErrorsSuppressed = 0;
+        private boolean suppressed = false;
+        private boolean oneErrorEnabled = false;
+
+        public GlError(int id)
+        {
+            this.id = id;
+        }
+
+        public void onFrameStart()
+        {
+            if (this.countErrorsSuppressed > 0)
+            {
+                Config.error("Suppressed " + this.countErrors + " OpenGL errors: " + this.id);
+            }
+
+            this.suppressed = this.countErrors > 10;
+            this.countErrors = 0;
+            this.countErrorsSuppressed = 0;
+            this.oneErrorEnabled = true;
+        }
+
+        public boolean isEnabled()
+        {
+            ++this.countErrors;
 
-            if (oneErrorEnabled)
+            if (this.oneErrorEnabled)
             {
-                oneErrorEnabled = false;
+                this.oneErrorEnabled = false;
                 return true;
             }
             else
             {
-                if (suppressed)
+                if (this.suppressed)
                 {
-                    ++countErrorsSuppressed;
+                    ++this.countErrorsSuppressed;
                 }
 
-                return !suppressed;
+                return !this.suppressed;
             }
         }
     }
