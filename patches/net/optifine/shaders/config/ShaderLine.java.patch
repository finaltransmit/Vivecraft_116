--- a/net/optifine/shaders/config/ShaderLine.java
+++ b/net/optifine/shaders/config/ShaderLine.java
@@ -1,25 +1,19 @@
 package net.optifine.shaders.config;
 
+import net.minecraft.util.math.vector.Vector2f;
+import net.minecraft.util.math.vector.Vector3i;
 import net.minecraft.util.math.vector.Vector4f;
 import net.optifine.Config;
 import net.optifine.util.StrUtils;
 
 public class ShaderLine
 {
-    private int type;
+    private ShaderLine.Type type;
     private String name;
     private String value;
     private String line;
-    public static final int TYPE_UNIFORM = 1;
-    public static final int TYPE_ATTRIBUTE = 2;
-    public static final int TYPE_CONST_INT = 3;
-    public static final int TYPE_CONST_FLOAT = 4;
-    public static final int TYPE_CONST_BOOL = 5;
-    public static final int TYPE_PROPERTY = 6;
-    public static final int TYPE_EXTENSION = 7;
-    public static final int TYPE_CONST_VEC4 = 8;
 
-    public ShaderLine(int type, String name, String value, String line)
+    public ShaderLine(ShaderLine.Type type, String name, String value, String line)
     {
         this.type = type;
         this.name = name;
@@ -27,7 +21,7 @@
         this.line = line;
     }
 
-    public int getType()
+    public ShaderLine.Type getType()
     {
         return this.type;
     }
@@ -44,7 +38,7 @@
 
     public boolean isUniform()
     {
-        return this.type == 1;
+        return this.type == ShaderLine.Type.UNIFORM;
     }
 
     public boolean isUniform(String name)
@@ -54,7 +48,7 @@
 
     public boolean isAttribute()
     {
-        return this.type == 2;
+        return this.type == ShaderLine.Type.ATTRIBUTE;
     }
 
     public boolean isAttribute(String name)
@@ -64,32 +58,52 @@
 
     public boolean isProperty()
     {
-        return this.type == 6;
+        return this.type == ShaderLine.Type.PROPERTY;
     }
 
     public boolean isConstInt()
     {
-        return this.type == 3;
+        return this.type == ShaderLine.Type.CONST_INT;
     }
 
     public boolean isConstFloat()
     {
-        return this.type == 4;
+        return this.type == ShaderLine.Type.CONST_FLOAT;
     }
 
     public boolean isConstBool()
     {
-        return this.type == 5;
+        return this.type == ShaderLine.Type.CONST_BOOL;
     }
 
     public boolean isExtension()
     {
-        return this.type == 7;
+        return this.type == ShaderLine.Type.EXTENSION;
+    }
+
+    public boolean isConstVec2()
+    {
+        return this.type == ShaderLine.Type.CONST_VEC2;
     }
 
     public boolean isConstVec4()
     {
-        return this.type == 8;
+        return this.type == ShaderLine.Type.CONST_VEC4;
+    }
+
+    public boolean isConstIVec3()
+    {
+        return this.type == ShaderLine.Type.CONST_IVEC3;
+    }
+
+    public boolean isLayout()
+    {
+        return this.type == ShaderLine.Type.LAYOUT;
+    }
+
+    public boolean isLayout(String name)
+    {
+        return this.isLayout() && name.equals(this.name);
     }
 
     public boolean isProperty(String name)
@@ -112,6 +126,11 @@
         return this.isConstInt() && this.name.endsWith(suffix);
     }
 
+    public boolean isConstIVec3(String name)
+    {
+        return this.isConstIVec3() && name.equals(this.name);
+    }
+
     public boolean isConstFloat(String name)
     {
         return this.isConstFloat() && name.equals(this.name);
@@ -162,6 +181,11 @@
         return this.isConstBool(name1, name2, name3) && this.getValueBool() == val;
     }
 
+    public boolean isConstVec2(String name)
+    {
+        return this.isConstVec2() && name.equals(this.name);
+    }
+
     public boolean isConstVec4Suffix(String suffix)
     {
         return this.isConstVec4() && this.name.endsWith(suffix);
@@ -191,6 +215,85 @@
         }
     }
 
+    public Vector3i getValueIVec3()
+    {
+        if (this.value == null)
+        {
+            return null;
+        }
+        else
+        {
+            String s = this.value.trim();
+            s = StrUtils.removePrefix(s, "ivec3");
+            s = StrUtils.trim(s, " ()");
+            String[] astring = Config.tokenize(s, ", ");
+
+            if (astring.length != 3)
+            {
+                return null;
+            }
+            else
+            {
+                int[] aint = new int[3];
+
+                for (int i = 0; i < astring.length; ++i)
+                {
+                    String s1 = astring[i];
+                    int j = Config.parseInt(s1, Integer.MIN_VALUE);
+
+                    if (j == Integer.MIN_VALUE)
+                    {
+                        return null;
+                    }
+
+                    aint[i] = j;
+                }
+
+                return new Vector3i(aint[0], aint[1], aint[2]);
+            }
+        }
+    }
+
+    public Vector2f getValueVec2()
+    {
+        if (this.value == null)
+        {
+            return null;
+        }
+        else
+        {
+            String s = this.value.trim();
+            s = StrUtils.removePrefix(s, "vec2");
+            s = StrUtils.trim(s, " ()");
+            String[] astring = Config.tokenize(s, ", ");
+
+            if (astring.length != 2)
+            {
+                return null;
+            }
+            else
+            {
+                float[] afloat = new float[2];
+
+                for (int i = 0; i < astring.length; ++i)
+                {
+                    String s1 = astring[i];
+                    s1 = StrUtils.removeSuffix(s1, new String[] {"F", "f"});
+                    float f = Config.parseFloat(s1, Float.MAX_VALUE);
+
+                    if (f == Float.MAX_VALUE)
+                    {
+                        return null;
+                    }
+
+                    afloat[i] = f;
+                }
+
+                return new Vector2f(afloat[0], afloat[1]);
+            }
+        }
+    }
+
     public Vector4f getValueVec4()
     {
         if (this.value == null)
@@ -244,4 +347,24 @@
             return Boolean.valueOf(this.value);
         }
     }
+
+    public String toString()
+    {
+        return "" + this.line;
+    }
+
+    public static enum Type
+    {
+        UNIFORM,
+        ATTRIBUTE,
+        CONST_INT,
+        CONST_IVEC3,
+        CONST_FLOAT,
+        CONST_VEC2,
+        CONST_VEC4,
+        CONST_BOOL,
+        PROPERTY,
+        EXTENSION,
+        LAYOUT;
+    }
 }
