--- a/net/optifine/shaders/config/ShaderParser.java
+++ b/net/optifine/shaders/config/ShaderParser.java
@@ -2,21 +2,24 @@
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import net.minecraft.util.math.vector.Vector3i;
+import net.optifine.Config;
 
 public class ShaderParser
 {
-    public static Pattern PATTERN_UNIFORM = Pattern.compile("\\s*uniform\\s+\\w+\\s+(\\w+).*");
+    public static Pattern PATTERN_UNIFORM = Pattern.compile("[\\w\\s(,=)]*uniform\\s+\\w+\\s+(\\w+).*");
     public static Pattern PATTERN_ATTRIBUTE = Pattern.compile("\\s*attribute\\s+\\w+\\s+(\\w+).*");
     public static Pattern PATTERN_CONST_INT = Pattern.compile("\\s*const\\s+int\\s+(\\w+)\\s*=\\s*([-+.\\w]+)\\s*;.*");
+    public static Pattern PATTERN_CONST_IVEC3 = Pattern.compile("\\s*const\\s+ivec3\\s+(\\w+)\\s*=\\s*(.+)\\s*;.*");
     public static Pattern PATTERN_CONST_FLOAT = Pattern.compile("\\s*const\\s+float\\s+(\\w+)\\s*=\\s*([-+.\\w]+)\\s*;.*");
+    public static Pattern PATTERN_CONST_VEC2 = Pattern.compile("\\s*const\\s+vec2\\s+(\\w+)\\s*=\\s*(.+)\\s*;.*");
     public static Pattern PATTERN_CONST_VEC4 = Pattern.compile("\\s*const\\s+vec4\\s+(\\w+)\\s*=\\s*(.+)\\s*;.*");
     public static Pattern PATTERN_CONST_BOOL = Pattern.compile("\\s*const\\s+bool\\s+(\\w+)\\s*=\\s*(\\w+)\\s*;.*");
-    public static Pattern PATTERN_PROPERTY = Pattern.compile("\\s*(/\\*|//)?\\s*([A-Z]+):\\s*(\\w+)\\s*(\\*/.*|\\s*)");
+    public static Pattern PATTERN_PROPERTY = Pattern.compile("\\s*(/\\*|//)?\\s*([A-Z]+):\\s*([\\w.,]+)\\s*(\\*/.*|\\s*)");
     public static Pattern PATTERN_EXTENSION = Pattern.compile("\\s*#\\s*extension\\s+(\\w+)\\s*:\\s*(\\w+).*");
-    public static Pattern PATTERN_DEFERRED_FSH = Pattern.compile(".*deferred[0-9]*\\.fsh");
-    public static Pattern PATTERN_COMPOSITE_FSH = Pattern.compile(".*composite[0-9]*\\.fsh");
-    public static Pattern PATTERN_FINAL_FSH = Pattern.compile(".*final\\.fsh");
-    public static Pattern PATTERN_DRAW_BUFFERS = Pattern.compile("[0-7N]*");
+    public static Pattern PATTERN_LAYOUT = Pattern.compile("\\s*layout\\s*\\((.*)\\)\\s*(\\w+).*");
+    public static Pattern PATTERN_DRAW_BUFFERS = Pattern.compile("[0-9N]+");
+    public static Pattern PATTERN_RENDER_TARGETS = Pattern.compile("[0-9N,]+");
 
     public static ShaderLine parseLine(String line)
     {
@@ -24,7 +27,7 @@
 
         if (matcher.matches())
         {
-            return new ShaderLine(1, matcher.group(1), "", line);
+            return new ShaderLine(ShaderLine.Type.UNIFORM, matcher.group(1), "", line);
         }
         else
         {
@@ -32,23 +35,23 @@
 
             if (matcher1.matches())
             {
-                return new ShaderLine(2, matcher1.group(1), "", line);
+                return new ShaderLine(ShaderLine.Type.ATTRIBUTE, matcher1.group(1), "", line);
             }
             else
             {
-                Matcher matcher2 = PATTERN_PROPERTY.matcher(line);
+                Matcher matcher2 = PATTERN_CONST_INT.matcher(line);
 
                 if (matcher2.matches())
                 {
-                    return new ShaderLine(6, matcher2.group(2), matcher2.group(3), line);
+                    return new ShaderLine(ShaderLine.Type.CONST_INT, matcher2.group(1), matcher2.group(2), line);
                 }
                 else
                 {
-                    Matcher matcher3 = PATTERN_CONST_INT.matcher(line);
+                    Matcher matcher3 = PATTERN_CONST_IVEC3.matcher(line);
 
                     if (matcher3.matches())
                     {
-                        return new ShaderLine(3, matcher3.group(1), matcher3.group(2), line);
+                        return new ShaderLine(ShaderLine.Type.CONST_IVEC3, matcher3.group(1), matcher3.group(2), line);
                     }
                     else
                     {
@@ -56,28 +59,55 @@
 
                         if (matcher4.matches())
                         {
-                            return new ShaderLine(4, matcher4.group(1), matcher4.group(2), line);
+                            return new ShaderLine(ShaderLine.Type.CONST_FLOAT, matcher4.group(1), matcher4.group(2), line);
                         }
                         else
                         {
-                            Matcher matcher5 = PATTERN_CONST_BOOL.matcher(line);
+                            Matcher matcher5 = PATTERN_CONST_VEC2.matcher(line);
 
                             if (matcher5.matches())
                             {
-                                return new ShaderLine(5, matcher5.group(1), matcher5.group(2), line);
+                                return new ShaderLine(ShaderLine.Type.CONST_VEC2, matcher5.group(1), matcher5.group(2), line);
                             }
                             else
                             {
-                                Matcher matcher6 = PATTERN_EXTENSION.matcher(line);
+                                Matcher matcher6 = PATTERN_CONST_VEC4.matcher(line);
 
                                 if (matcher6.matches())
                                 {
-                                    return new ShaderLine(7, matcher6.group(1), matcher6.group(2), line);
+                                    return new ShaderLine(ShaderLine.Type.CONST_VEC4, matcher6.group(1), matcher6.group(2), line);
                                 }
                                 else
                                 {
-                                    Matcher matcher7 = PATTERN_CONST_VEC4.matcher(line);
-                                    return matcher7.matches() ? new ShaderLine(8, matcher7.group(1), matcher7.group(2), line) : null;
+                                    Matcher matcher7 = PATTERN_CONST_BOOL.matcher(line);
+
+                                    if (matcher7.matches())
+                                    {
+                                        return new ShaderLine(ShaderLine.Type.CONST_BOOL, matcher7.group(1), matcher7.group(2), line);
+                                    }
+                                    else
+                                    {
+                                        Matcher matcher8 = PATTERN_PROPERTY.matcher(line);
+
+                                        if (matcher8.matches())
+                                        {
+                                            return new ShaderLine(ShaderLine.Type.PROPERTY, matcher8.group(2), matcher8.group(3), line);
+                                        }
+                                        else
+                                        {
+                                            Matcher matcher9 = PATTERN_EXTENSION.matcher(line);
+
+                                            if (matcher9.matches())
+                                            {
+                                                return new ShaderLine(ShaderLine.Type.EXTENSION, matcher9.group(1), matcher9.group(2), line);
+                                            }
+                                            else
+                                            {
+                                                Matcher matcher10 = PATTERN_LAYOUT.matcher(line);
+                                                return matcher10.matches() ? new ShaderLine(ShaderLine.Type.LAYOUT, matcher10.group(2), matcher10.group(1), line) : null;
+                                            }
+                                        }
+                                    }
                                 }
                             }
                         }
@@ -89,17 +119,14 @@
 
     public static int getIndex(String uniform, String prefix, int minIndex, int maxIndex)
     {
-        if (uniform.length() != prefix.length() + 1)
-        {
-            return -1;
-        }
-        else if (!uniform.startsWith(prefix))
+        if (!uniform.startsWith(prefix))
         {
             return -1;
         }
         else
         {
-            int i = uniform.charAt(prefix.length()) - 48;
+            String s = uniform.substring(prefix.length());
+            int i = Config.parseInt(s, -1);
             return i >= minIndex && i <= maxIndex ? i : -1;
         }
     }
@@ -162,6 +189,11 @@
         }
     }
 
+    public static int getShadowColorImageIndex(String uniform)
+    {
+        return getIndex(uniform, "shadowcolorimg", 0, 1);
+    }
+
     public static int getDepthIndex(String uniform)
     {
         return getIndex(uniform, "depthtex", 0, 2);
@@ -170,26 +202,87 @@
     public static int getColorIndex(String uniform)
     {
         int i = getIndex(uniform, "gaux", 1, 4);
-        return i > 0 ? i + 3 : getIndex(uniform, "colortex", 4, 7);
+        return i > 0 ? i + 3 : getIndex(uniform, "colortex", 0, 15);
     }
 
-    public static boolean isDeferred(String filename)
+    public static int getColorImageIndex(String uniform)
     {
-        return PATTERN_DEFERRED_FSH.matcher(filename).matches();
+        return getIndex(uniform, "colorimg", 0, 15);
     }
 
-    public static boolean isComposite(String filename)
+    public static String[] parseDrawBuffers(String str)
     {
-        return PATTERN_COMPOSITE_FSH.matcher(filename).matches();
+        if (!PATTERN_DRAW_BUFFERS.matcher(str).matches())
+        {
+            return null;
+        }
+        else
+        {
+            str = str.trim();
+            String[] astring = new String[str.length()];
+
+            for (int i = 0; i < astring.length; ++i)
+            {
+                astring[i] = String.valueOf(str.charAt(i));
+            }
+
+            return astring;
+        }
     }
 
-    public static boolean isFinal(String filename)
+    public static String[] parseRenderTargets(String str)
     {
-        return PATTERN_FINAL_FSH.matcher(filename).matches();
+        if (!PATTERN_RENDER_TARGETS.matcher(str).matches())
+        {
+            return null;
+        }
+        else
+        {
+            str = str.trim();
+            return Config.tokenize(str, ",");
+        }
     }
 
-    public static boolean isValidDrawBuffers(String str)
+    public static Vector3i parseLocalSize(String value)
     {
-        return PATTERN_DRAW_BUFFERS.matcher(str).matches();
+        int i = 1;
+        int j = 1;
+        int k = 1;
+        String[] astring = Config.tokenize(value, ",");
+
+        for (int l = 0; l < astring.length; ++l)
+        {
+            String s = astring[l];
+            String[] astring1 = Config.tokenize(s, "=");
+
+            if (astring1.length == 2)
+            {
+                String s1 = astring1[0].trim();
+                String s2 = astring1[1].trim();
+                int i1 = Config.parseInt(s2, -1);
+
+                if (i1 < 1)
+                {
+                    return null;
+                }
+
+                if (s1.equals("local_size_x"))
+                {
+                    i = i1;
+                }
+
+                if (s1.equals("local_size_y"))
+                {
+                    j = i1;
+                }
+
+                if (s1.equals("local_size_z"))
+                {
+                    k = i1;
+                }
+            }
+        }
+
+        return i == 1 && j == 1 && k == 1 ? null : new Vector3i(i, j, k);
     }
 }
