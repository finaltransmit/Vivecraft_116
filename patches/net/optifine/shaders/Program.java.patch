--- a/net/optifine/shaders/Program.java
+++ b/net/optifine/shaders/Program.java
@@ -1,10 +1,10 @@
 package net.optifine.shaders;
 
-import java.nio.IntBuffer;
 import java.util.Arrays;
 import net.optifine.render.GlAlphaState;
 import net.optifine.render.GlBlendState;
 import net.optifine.shaders.config.RenderScale;
+import net.optifine.util.DynamicDimension;
 
 public class Program
 {
@@ -12,18 +12,22 @@
     private final String name;
     private final ProgramStage programStage;
     private final Program programBackup;
+    private ComputeProgram[] computePrograms;
     private GlAlphaState alphaState;
     private GlBlendState blendState;
+    private GlBlendState[] blendStatesColorIndexed;
     private RenderScale renderScale;
-    private final Boolean[] buffersFlip = new Boolean[8];
+    private final Boolean[] buffersFlip = new Boolean[16];
     private int id;
     private int ref;
-    private String drawBufSettings;
-    private IntBuffer drawBuffers;
-    private IntBuffer drawBuffersBuffer;
+    private String[] drawBufSettings;
+    private DrawBuffers drawBuffers;
+    private DrawBuffers drawBuffersCustom;
     private int compositeMipmapSetting;
     private int countInstances;
-    private final boolean[] toggleColorTextures = new boolean[8];
+    private final boolean[] toggleColorTextures = new boolean[16];
+    private DynamicDimension drawSize;
+    private GlBlendState[] blendStatesIndexed;
 
     public Program(int index, String name, ProgramStage programStage, Program programBackup)
     {
@@ -31,6 +35,7 @@
         this.name = name;
         this.programStage = programStage;
         this.programBackup = programBackup;
+        this.computePrograms = new ComputeProgram[0];
     }
 
     public Program(int index, String name, ProgramStage programStage, boolean ownBackup)
@@ -39,12 +44,14 @@
         this.name = name;
         this.programStage = programStage;
         this.programBackup = ownBackup ? this : null;
+        this.computePrograms = new ComputeProgram[0];
     }
 
     public void resetProperties()
     {
         this.alphaState = null;
         this.blendState = null;
+        this.blendStatesColorIndexed = null;
         this.renderScale = null;
         Arrays.fill(this.buffersFlip, (Object)null);
     }
@@ -60,10 +67,13 @@
         this.drawBufSettings = null;
         this.compositeMipmapSetting = 0;
         this.countInstances = 0;
+        Arrays.fill(this.toggleColorTextures, false);
+        this.drawSize = null;
+        this.blendStatesIndexed = null;
 
-        if (this.drawBuffersBuffer == null)
+        if (this.drawBuffersCustom == null)
         {
-            this.drawBuffersBuffer = Shaders.nextIntBuffer(8);
+            this.drawBuffersCustom = new DrawBuffers(this.name, 16, 8);
         }
     }
 
@@ -72,6 +82,7 @@
         this.id = p.getId();
         this.alphaState = p.getAlphaState();
         this.blendState = p.getBlendState();
+        this.blendStatesColorIndexed = p.blendStatesColorIndexed;
         this.renderScale = p.getRenderScale();
         System.arraycopy(p.getBuffersFlip(), 0, this.buffersFlip, 0, this.buffersFlip.length);
         this.drawBufSettings = p.getDrawBufSettings();
@@ -79,6 +90,7 @@
         this.compositeMipmapSetting = p.getCompositeMipmapSetting();
         this.countInstances = p.getCountInstances();
         System.arraycopy(p.getToggleColorTextures(), 0, this.toggleColorTextures, 0, this.toggleColorTextures.length);
+        this.blendStatesIndexed = p.blendStatesIndexed;
     }
 
     public int getIndex()
@@ -111,19 +123,19 @@
         return this.ref;
     }
 
-    public String getDrawBufSettings()
+    public String[] getDrawBufSettings()
     {
         return this.drawBufSettings;
     }
 
-    public IntBuffer getDrawBuffers()
+    public DrawBuffers getDrawBuffers()
     {
         return this.drawBuffers;
     }
 
-    public IntBuffer getDrawBuffersBuffer()
+    public DrawBuffers getDrawBuffersCustom()
     {
-        return this.drawBuffersBuffer;
+        return this.drawBuffersCustom;
     }
 
     public int getCompositeMipmapSetting()
@@ -146,6 +158,16 @@
         return this.blendState;
     }
 
+    public GlBlendState[] getBlendStatesColorIndexed()
+    {
+        return this.blendStatesColorIndexed;
+    }
+
+    public GlBlendState[] getBlendStatesIndexed()
+    {
+        return this.blendStatesIndexed;
+    }
+
     public RenderScale getRenderScale()
     {
         return this.renderScale;
@@ -171,12 +193,12 @@
         this.ref = ref;
     }
 
-    public void setDrawBufSettings(String drawBufSettings)
+    public void setDrawBufSettings(String[] drawBufSettings)
     {
         this.drawBufSettings = drawBufSettings;
     }
 
-    public void setDrawBuffers(IntBuffer drawBuffers)
+    public void setDrawBuffers(DrawBuffers drawBuffers)
     {
         this.drawBuffers = drawBuffers;
     }
@@ -201,6 +223,40 @@
         this.blendState = blendState;
     }
 
+    public void setBlendStateColorIndexed(int index, GlBlendState blendState)
+    {
+        if (this.blendStatesColorIndexed == null)
+        {
+            this.blendStatesColorIndexed = new GlBlendState[index + 1];
+        }
+
+        if (this.blendStatesColorIndexed.length < index + 1)
+        {
+            GlBlendState[] aglblendstate = new GlBlendState[index + 1];
+            System.arraycopy(this.blendStatesColorIndexed, 0, aglblendstate, 0, this.blendStatesColorIndexed.length);
+            this.blendStatesColorIndexed = aglblendstate;
+        }
+
+        this.blendStatesColorIndexed[index] = blendState;
+    }
+
+    public void setBlendStateIndexed(int index, GlBlendState blendState)
+    {
+        if (this.blendStatesIndexed == null)
+        {
+            this.blendStatesIndexed = new GlBlendState[index + 1];
+        }
+
+        if (this.blendStatesIndexed.length < index + 1)
+        {
+            GlBlendState[] aglblendstate = new GlBlendState[index + 1];
+            System.arraycopy(this.blendStatesIndexed, 0, aglblendstate, 0, this.blendStatesIndexed.length);
+            this.blendStatesIndexed = aglblendstate;
+        }
+
+        this.blendStatesIndexed[index] = blendState;
+    }
+
     public void setRenderScale(RenderScale renderScale)
     {
         this.renderScale = renderScale;
@@ -228,6 +284,31 @@
         }
     }
 
+    public boolean hasCompositeMipmaps()
+    {
+        return this.compositeMipmapSetting != 0;
+    }
+
+    public DynamicDimension getDrawSize()
+    {
+        return this.drawSize;
+    }
+
+    public void setDrawSize(DynamicDimension drawSize)
+    {
+        this.drawSize = drawSize;
+    }
+
+    public ComputeProgram[] getComputePrograms()
+    {
+        return this.computePrograms;
+    }
+
+    public void setComputePrograms(ComputeProgram[] computePrograms)
+    {
+        this.computePrograms = computePrograms;
+    }
+
     public String toString()
     {
         return "name: " + this.name + ", id: " + this.id + ", ref: " + this.ref + ", real: " + this.getRealProgramName();
