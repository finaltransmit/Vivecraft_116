--- a/net/optifine/Config.java
+++ b/net/optifine/Config.java
@@ -74,8 +74,8 @@
     public static final String OF_NAME = "OptiFine";
     public static final String MC_VERSION = "1.16.5";
     public static final String OF_EDITION = "HD_U";
-    public static final String OF_RELEASE = "G6";
-    public static final String VERSION = "OptiFine_1.16.5_HD_U_G6";
+    public static final String OF_RELEASE = "G8";
+    public static final String VERSION = "OptiFine_1.16.5_HD_U_G8";
     private static String build = null;
     private static String newRelease = null;
     private static boolean notify64BitJava = false;
@@ -116,7 +116,7 @@
 
     public static String getVersion()
     {
-        return "OptiFine_1.16.5_HD_U_G6";
+        return "OptiFine_1.16.5_HD_U_G8";
     }
 
     public static String getVersionDebug()
@@ -130,7 +130,7 @@
             stringbuffer.append(", ");
         }
 
-        stringbuffer.append("OptiFine_1.16.5_HD_U_G6");
+        stringbuffer.append("OptiFine_1.16.5_HD_U_G8");
         String s = Shaders.getShaderPackName();
 
         if (s != null)
@@ -144,13 +144,14 @@
 
     public static void initGameSettings(GameSettings settings)
     {
-        if (gameSettings == null)
-        {
+    	//oh this game again.
+     //   if (gameSettings == null)
+      //  {
             gameSettings = settings;
             updateAvailableProcessors();
             ReflectorForge.putLaunchBlackboard("optifine.ForgeSplashCompatible", Boolean.TRUE);
             antialiasingLevel = gameSettings.ofAaLevel;
-        }
+     //   }
     }
 
     public static void initDisplay()
@@ -1255,6 +1256,11 @@
         return minecraft.worldRenderer;
     }
 
+    public static WorldRenderer getWorldRenderer()
+    {
+        return minecraft.worldRenderer;
+    }
+
     public static GameRenderer getGameRenderer()
     {
         return minecraft.gameRenderer;
@@ -1404,6 +1410,11 @@
         return val >= min && val <= max;
     }
 
+    public static boolean between(double val, double min, double max)
+    {
+        return val >= min && val <= max;
+    }
+
     public static boolean isDrippingWaterLava()
     {
         return gameSettings.ofDrippingWaterLava;
@@ -1434,6 +1445,32 @@
         }
     }
 
+    public static int parseHexInt(String str, int defVal)
+    {
+        try
+        {
+            if (str == null)
+            {
+                return defVal;
+            }
+            else
+            {
+                str = str.trim();
+
+                if (str.startsWith("0x"))
+                {
+                    str = str.substring(2);
+                }
+
+                return Integer.parseInt(str, 16);
+            }
+        }
+        catch (NumberFormatException numberformatexception)
+        {
+            return defVal;
+        }
+    }
+
     public static float parseFloat(String str, float defVal)
     {
         try
@@ -1675,6 +1712,7 @@
 
             if (s == null)
             {
+                in.close();
                 return stringbuffer.toString();
             }
 
@@ -2022,7 +2060,7 @@
 
     public static String getFpsString()
     {
-        int i = Reflector.getFieldValueInt(Reflector.Minecraft_debugFPS, -1);
+        int i = getFpsAverage();
         int j = getFpsMin();
 
         if (showFrameTime)
@@ -2042,6 +2080,11 @@
         return showFrameTime;
     }
 
+    public static int getFpsAverage()
+    {
+        return Reflector.getFieldValueInt(Reflector.Minecraft_debugFPS, -1);
+    }
+
     public static int getFpsMin()
     {
         return fpsMinLast;
