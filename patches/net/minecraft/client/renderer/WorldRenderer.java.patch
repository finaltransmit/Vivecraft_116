--- a/net/minecraft/client/renderer/WorldRenderer.java
+++ b/net/minecraft/client/renderer/WorldRenderer.java
@@ -57,6 +57,7 @@
 import net.minecraft.client.renderer.entity.EntityRendererManager;
 import net.minecraft.client.renderer.entity.ItemFrameRenderer;
 import net.minecraft.client.renderer.model.ModelBakery;
+import net.minecraft.client.renderer.model.ModelResourceLocation;
 import net.minecraft.client.renderer.texture.AtlasTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.tileentity.SignTileEntityRenderer;
@@ -68,6 +69,7 @@
 import net.minecraft.client.settings.GraphicsFanciness;
 import net.minecraft.client.settings.ParticleStatus;
 import net.minecraft.client.shader.Framebuffer;
+import net.minecraft.client.shader.FramebufferConstants;
 import net.minecraft.client.shader.ShaderGroup;
 import net.minecraft.client.world.ClientWorld;
 import net.minecraft.client.world.DimensionRenderInfo;
@@ -134,12 +136,15 @@
 import net.optifine.DynamicLights;
 import net.optifine.Lagometer;
 import net.optifine.SmartAnimations;
+import net.optifine.entity.model.CustomEntityModels;
 import net.optifine.reflect.Reflector;
 import net.optifine.reflect.ReflectorForge;
 import net.optifine.render.ChunkVisibility;
 import net.optifine.render.RenderEnv;
 import net.optifine.render.RenderStateManager;
+import net.optifine.render.RenderUtils;
 import net.optifine.render.VboRegion;
+import net.optifine.shaders.RenderStage;
 import net.optifine.shaders.Shaders;
 import net.optifine.shaders.ShadersRender;
 import net.optifine.shaders.ShadowUtils;
@@ -151,6 +156,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.opengl.GL11;
+import org.vivecraft.gameplay.screenhandlers.KeyboardHandler;
+import org.vivecraft.gameplay.screenhandlers.RadialHandler;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.CustomRender;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.Renderable;
+import org.vivecraft.settings.VRSettings;
 
 public class WorldRenderer implements IResourceManagerReloadListener, AutoCloseable
 {
@@ -267,7 +279,16 @@
     private static boolean ambientOcclusion = false;
     private Map<String, List<Entity>> mapEntityLists = new HashMap<>();
     private Map<RenderType, Map> mapRegionLayers = new LinkedHashMap<>();
-
+    //Vivecraft
+    @Nullable
+    public Framebuffer alphaSortVROccludedFramebuffer;
+    @Nullable
+    public Framebuffer alphaSortVRUnoccludedFramebuffer;
+    @Nullable 
+    public Framebuffer alphaSortVRHandsFramebuffer;
+    //
+     
+    
     public WorldRenderer(Minecraft mcIn, RenderTypeBuffers rainTimeBuffersIn)
     {
         this.mc = mcIn;
@@ -316,9 +337,16 @@
 
             lightmapIn.enableLightmap();
             World world = this.mc.world;
-            int i = MathHelper.floor(xIn);
-            int j = MathHelper.floor(yIn);
-            int k = MathHelper.floor(zIn);
+            
+            //Vivecraft - fix which block column doesnt get rain.
+            Vector3d me = mc.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition();
+            if(mc.currentPass == RenderPass.THIRD || mc.currentPass == RenderPass.CAMERA)
+                 me = mc.vrPlayer.vrdata_world_render.getEye(mc.currentPass).getPosition();
+            int i = MathHelper.floor(me.x);
+            int j = MathHelper.floor(me.y);
+            int k = MathHelper.floor(me.z);
+            //
+            
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
             RenderSystem.enableAlphaTest();
@@ -549,17 +577,22 @@
         RenderSystem.texParameter(3553, 10242, 10497);
         RenderSystem.texParameter(3553, 10243, 10497);
         RenderSystem.bindTexture(0);
-        this.makeEntityOutlineShader();
-
-        if (Minecraft.isFabulousGraphicsEnabled())
-        {
-            this.func_239233_v_();
-        }
+        //Vivecraft
+        mc.stereoProvider.reinitFrameBuffers("Resource Reload");
+        
+       // this.makeEntityOutlineShader();
+
+//        if (Minecraft.func_238218_y_())
+//        {
+//            this.func_239233_v_();
+//        }
+        //
     }
 
     /**
      * Creates the entity outline shader to be stored in RenderGlobal.entityOutlineShader
      */
+     //unused
     public void makeEntityOutlineShader()
     {
         if (this.entityOutlineShader != null)
@@ -570,7 +603,7 @@
         ResourceLocation resourcelocation = new ResourceLocation("shaders/post/entity_outline.json");
 
         try
-        {
+        {     	
             this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
             this.entityOutlineShader.createBindFramebuffers(this.mc.getMainWindow().getFramebufferWidth(), this.mc.getMainWindow().getFramebufferHeight());
             this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
@@ -588,11 +621,12 @@
             this.entityOutlineFramebuffer = null;
         }
     }
-
-    private void func_239233_v_()
+   
+    //unused make alpha shader
+    public void func_239233_v_()
     {
         this.func_239234_w_();
-        ResourceLocation resourcelocation = new ResourceLocation("shaders/post/transparency.json");
+        ResourceLocation resourcelocation = new ResourceLocation("shaders/post/vrtransparency.json");
 
         try
         {
@@ -644,7 +678,8 @@
         }
     }
 
-    private void func_239234_w_()
+    //unused
+    public void func_239234_w_()
     {
         if (this.field_239227_K_ != null)
         {
@@ -869,14 +904,15 @@
     {
         if (this.world != null)
         {
-            if (Minecraft.isFabulousGraphicsEnabled())
-            {
-                this.func_239233_v_();
-            }
-            else
-            {
-                this.func_239234_w_();
-            }
+        	//no no only we can use that word.
+//            if (Minecraft.func_238218_y_())
+//            {
+//                this.func_239233_v_();
+//            }
+//            else
+//            {
+//                this.func_239234_w_();
+//            }
 
             this.world.clearColorCaches();
 
@@ -1018,7 +1054,8 @@
             this.viewFrustum.updateChunkPositions(this.mc.player.getPosX(), this.mc.player.getPosZ());
         }
 
-        if (Config.isDynamicLights())
+        // VIVECRAFT: only update on the first frame, otherwise third person makes it go crazy
+        if (Config.isDynamicLights() && mc.currentPass == RenderPass.LEFT)
         {
             DynamicLights.update(this);
         }
@@ -1032,7 +1069,8 @@
         BlockPos blockpos1 = new BlockPos(MathHelper.floor(vector3d.x / 16.0D) * 16, MathHelper.floor(vector3d.y / 16.0D) * 16, MathHelper.floor(vector3d.z / 16.0D) * 16);
         float f = activeRenderInfoIn.getPitch();
         float f1 = activeRenderInfoIn.getYaw();
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || vector3d.x != this.lastViewEntityX || vector3d.y != this.lastViewEntityY || vector3d.z != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
+        // VIVECRAFT: Always update culling because different camera positions
+        this.displayListEntitiesDirty = true; //this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || vector3d.x != this.lastViewEntityX || vector3d.y != this.lastViewEntityY || vector3d.z != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
         this.lastViewEntityX = vector3d.x;
         this.lastViewEntityY = vector3d.y;
         this.lastViewEntityZ = vector3d.z;
@@ -1376,8 +1414,14 @@
         TileEntityRendererDispatcher.instance.prepare(this.world, this.mc.getTextureManager(), this.mc.fontRenderer, activeRenderInfoIn, this.mc.objectMouseOver);
         this.renderManager.cacheActiveRenderInfo(this.world, activeRenderInfoIn, this.mc.pointedEntity);
         IProfiler iprofiler = this.world.getProfiler();
-        iprofiler.endStartSection("light_updates");
-        this.mc.world.getChunkProvider().getLightManager().tick(Integer.MAX_VALUE, true, true);
+
+    	//Vivecraft once per frame
+    	if(mc.currentPass == RenderPass.LEFT) {
+	        iprofiler.endStartSection("light_updates");
+	        this.mc.world.getChunkProvider().getLightManager().tick(Integer.MAX_VALUE, true, true);
+    	}
+    	//
+    	setShaderGroup();
         Vector3d vector3d = activeRenderInfoIn.getProjectedView();
         double d0 = vector3d.getX();
         double d1 = vector3d.getY();
@@ -1424,11 +1468,8 @@
         if (flag1)
         {
             Shaders.clearRenderBuffer();
-        }
-
-        if (flag1)
-        {
             Shaders.setCamera(matrixStackIn, activeRenderInfoIn, partialTicks);
+            Shaders.renderPrepare();
         }
 
         clippinghelper.disabled = Config.isShaders() && !Shaders.isFrustumCulling();
@@ -1487,12 +1528,13 @@
         iprofiler.endStartSection("terrain");
         Lagometer.timerTerrain.start();
 
-        if (this.mc.gameSettings.ofSmoothFps)
+        // VIVECRAFT: Nope!
+        /*if (this.mc.gameSettings.ofSmoothFps)
         {
             this.mc.getProfiler().endStartSection("finish");
             GL11.glFinish();
             this.mc.getProfiler().endStartSection("terrain");
-        }
+        }*/
 
         if (Config.isFogOff() && FogRenderer.fogStandard)
         {
@@ -1511,16 +1553,23 @@
         }
 
         Lagometer.timerTerrain.end();
-
+        //TODO: fix lighting?
+        Matrix4f light = new Matrix4f();
+        light.setIdentity();
         if (this.world.func_239132_a_().func_239217_c_())
         {
-            RenderHelper.setupDiffuseGuiLighting(matrixStackIn.getLast().getMatrix());
+            RenderHelper.setupDiffuseGuiLighting(light);
         }
         else
         {
-            RenderHelper.setupLevelDiffuseLighting(matrixStackIn.getLast().getMatrix());
+            RenderHelper.setupLevelDiffuseLighting(light);
         }
-
+        
+        //Vivecraft - VR Stencil
+        this.mc.getProfiler().endStartSection("stencil");
+    		gameRendererIn.drawEyeStencil(flag1);
+		//    
+       
         if (flag1)
         {
             Shaders.beginEntities();
@@ -1559,6 +1608,13 @@
             RenderStateManager.enableCache();
         }
 
+        //Vivecraft
+        boolean selfRender = (mc.currentPass == RenderPass.THIRD && mc.vrSettings.displayMirrorMode == VRSettings.MIRROR_THIRD_PERSON) || mc.currentPass == RenderPass.CAMERA;
+        selfRender |= mc.vrSettings.shouldRenderSelf || mc.vrSettings.tmpRenderSelf;
+
+        CustomRender.renderStage(partialTicks, Renderable.RenderStage.PRE_WORLD);
+        //
+
         for (WorldRenderer.LocalRenderInformationContainer worldrenderer$localrenderinformationcontainer : this.renderInfosEntities)
         {
             ChunkRenderDispatcher.ChunkRender chunkrenderdispatcher$chunkrender = worldrenderer$localrenderinformationcontainer.renderChunk;
@@ -1567,8 +1623,8 @@
             for (Entity entity : chunk.getEntityLists()[chunkrenderdispatcher$chunkrender.getPosition().getY() / 16])
             {
                 boolean flag4 = entity == this.mc.player && !this.mc.player.isSpectator();
-
-                if ((this.renderManager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(this.mc.player)) && (entity != activeRenderInfoIn.getRenderViewEntity() || activeRenderInfoIn.isThirdPerson() || activeRenderInfoIn.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfoIn.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfoIn.getRenderViewEntity() == entity || flag4))
+                //Vivecraft insert selfRender
+                if ((this.renderManager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(this.mc.player)) && (selfRender || entity != activeRenderInfoIn.getRenderViewEntity() || activeRenderInfoIn.isThirdPerson() || activeRenderInfoIn.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfoIn.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfoIn.getRenderViewEntity() == entity || flag4))
                 {
                     String s = entity.getClass().getName();
                     List<Entity> list = this.mapEntityLists.get(s);
@@ -1590,6 +1646,12 @@
             {
                 ++this.countEntitiesRendered;
 
+                //Vivecraft put back location.
+                if(entity1 == activeRenderInfoIn.getRenderViewEntity()) { 
+                	gameRendererIn.restoreRVEPos((LivingEntity) entity1);
+                }
+                //
+
                 if (entity1.ticksExisted == 0)
                 {
                     entity1.lastTickPosX = entity1.getPosX();
@@ -1625,6 +1687,14 @@
 
                 this.renderEntity(entity1, d0, d1, d2, partialTicks, matrixStackIn, irendertypebuffer);
                 this.renderedEntity = null;
+
+                //Vivecraft
+                if(entity1 == activeRenderInfoIn.getRenderViewEntity()) {
+                	gameRendererIn.cacheRVEPos((LivingEntity) entity1);
+                	gameRendererIn.setupRVE();
+                }
+                //
+
             }
 
             list1.clear();
@@ -1646,7 +1716,7 @@
         SignTileEntityRenderer.updateTextRenderDistance();
         boolean flag5 = Reflector.IForgeTileEntity_getRenderBoundingBox.exists();
         ClippingHelper clippinghelper1 = clippinghelper;
-        label347:
+        label354:
 
         for (WorldRenderer.LocalRenderInformationContainer worldrenderer$localrenderinformationcontainer1 : this.renderInfosTileEntities)
         {
@@ -1665,7 +1735,7 @@
                     {
                         if (!iterator1.hasNext())
                         {
-                            continue label347;
+                            continue label354;
                         }
 
                         tileentity1 = (TileEntity)iterator1.next();
@@ -1716,7 +1786,7 @@
         synchronized (this.setTileEntities)
         {
             Iterator iterator = this.setTileEntities.iterator();
-            label322:
+            label329:
 
             while (true)
             {
@@ -1727,7 +1797,7 @@
                 {
                     if (!iterator.hasNext())
                     {
-                        break label322;
+                        break label329;
                     }
 
                     tileentity = (TileEntity)iterator.next();
@@ -1810,15 +1880,37 @@
         }
 
         this.renderOverlayDamaged = false;
+        RenderUtils.flushRenderBuffers();
         --renderEntitiesCounter;
         this.checkMatrixStack(matrixStackIn);
         RayTraceResult raytraceresult = this.mc.objectMouseOver;
-
+        iprofiler.endStartSection("outline");
+        
+        //Vivecraft interact highlight
+        selR = selG = selB = 1f;
+        for (int c=0;c<2;c++) {
+        	if(mc.interactTracker.isInteractActive(c) && (mc.interactTracker.inBlockHit[c] != null || mc.interactTracker.bukkit[c])) {
+        		BlockPos blockpos = mc.interactTracker.inBlockHit[c] != null ? mc.interactTracker.inBlockHit[c].getPos() : new BlockPos(mc.vrPlayer.vrdata_world_render.getController(c).getPosition());
+        		BlockState blockstate = this.world.getBlockState(blockpos);
+        		this.drawSelectionBox(matrixStackIn, irendertypebuffer$impl.getBuffer(RenderType.getLines()), activeRenderInfoIn.getRenderViewEntity(), d0, d1, d2, blockpos, blockstate);
+        		if (c==0) drawBlockOutline = false; //don't draw both
+        	}
+        }
+        //
+             	  
         if (drawBlockOutline && raytraceresult != null && raytraceresult.getType() == RayTraceResult.Type.BLOCK)
         {
-            iprofiler.endStartSection("outline");
+        	//vivecraft put back black outline
+        	selR = selG = selB = 0f;
+        	//
             BlockPos blockpos = ((BlockRayTraceResult)raytraceresult).getPos();
             BlockState blockstate = this.world.getBlockState(blockpos);
+
+            if (flag1)
+            {
+                ShadersRender.beginOutline();
+            }
+
             boolean flag7;
 
             if (Reflector.IForgeBlockState_isAir2.exists() && Reflector.ForgeHooksClient_onDrawBlockHighlight.exists())
@@ -1839,20 +1931,27 @@
             if (flag1)
             {
                 irendertypebuffer$impl.finish(RenderType.getLines());
+                ShadersRender.endOutline();
             }
         }
         else if (raytraceresult != null && raytraceresult.getType() == RayTraceResult.Type.ENTITY)
         {
             Reflector.ForgeHooksClient_onDrawBlockHighlight.call(this, activeRenderInfoIn, raytraceresult, partialTicks, matrixStackIn, irendertypebuffer$impl);
         }
-
+   
         RenderSystem.pushMatrix();
         RenderSystem.multMatrix(matrixStackIn.getLast().getMatrix());
         boolean flag6 = GlStateManager.isFogEnabled();
         GlStateManager.disableFog();
+
+        if (flag1)
+        {
+            ShadersRender.beginDebug();
+        }
+
         this.mc.debugRenderer.render(matrixStackIn, irendertypebuffer$impl, d0, d1, d2);
-        GlStateManager.setFogEnabled(flag6);
         RenderSystem.popMatrix();
+        this.mc.getProfiler().endStartSection("render bukkake");
         irendertypebuffer$impl.finish(Atlases.getTranslucentCullBlockType());
         irendertypebuffer$impl.finish(Atlases.getBannerType());
         irendertypebuffer$impl.finish(Atlases.getShieldType());
@@ -1865,17 +1964,22 @@
         irendertypebuffer$impl.finish(RenderType.getEntityGlintDirect());
         irendertypebuffer$impl.finish(RenderType.getWaterMask());
         this.renderTypeTextures.getCrumblingBufferSource().finish();
+        GlStateManager.setFogEnabled(flag6);
 
         if (flag1)
         {
             irendertypebuffer$impl.finish();
-            Shaders.preRenderHand();
-            ShadersRender.renderHand0(gameRendererIn, matrixStackIn, activeRenderInfoIn, partialTicks);
+            ShadersRender.endDebug();
+            //Shaders.preRenderHand();
+            //ShadersRender.renderHand0(gameRendererIn, matrixStackIn, activeRenderInfoIn, partialTicks);
             Shaders.preWater();
         }
+        
+        boolean menuHandleft = gameRendererIn.isInMenuRoom() || mc.currentScreen != null || KeyboardHandler.Showing;
+        boolean menuhandright = menuHandleft || (mc.interactTracker.hotbar >= 0 && mc.vrSettings.vrTouchHotbar);
 
         if (this.field_239227_K_ != null)
-        {
+        { //fabulous!
             irendertypebuffer$impl.finish(RenderType.getLines());
             irendertypebuffer$impl.finish();
             this.field_239222_F_.framebufferClear(Minecraft.IS_RUNNING_ON_MAC);
@@ -1890,10 +1994,15 @@
             iprofiler.endStartSection("particles");
             this.mc.particles.renderParticles(matrixStackIn, irendertypebuffer$impl, lightmapIn, activeRenderInfoIn, partialTicks, clippinghelper);
             RenderState.field_239237_T_.clearRenderState();
+            
+            gameRendererIn.renderVRFabulous(partialTicks, this, menuhandright, menuHandleft);
         }
         else
-        {
-            iprofiler.endStartSection("translucent");
+        { //Fast, Fancy
+        	//Vivecraft do it once.
+        	gameRendererIn.renderVrFast(partialTicks, false, menuhandright, menuHandleft);
+        	//
+        	iprofiler.endStartSection("translucent");
 
             if (flag1)
             {
@@ -1919,7 +2028,9 @@
             }
 
             this.mc.particles.renderParticles(matrixStackIn, irendertypebuffer$impl, lightmapIn, activeRenderInfoIn, partialTicks, clippinghelper);
-
+            //Vivecraft do it again. Come at me bro.
+            gameRendererIn.renderVrFast(partialTicks, true, menuhandright, menuHandleft);
+            //
             if (flag1)
             {
                 Shaders.endParticles();
@@ -1985,6 +2096,7 @@
         }
 
         this.renderDebug(activeRenderInfoIn);
+        CustomRender.renderStage(partialTicks, Renderable.RenderStage.DEBUG);
         RenderSystem.shadeModel(7424);
         RenderSystem.depthMask(true);
         RenderSystem.disableBlend();
@@ -2602,6 +2714,11 @@
                     Shaders.disableTexture2D();
                 }
 
+                if (flag)
+                {
+                    Shaders.setRenderStage(RenderStage.SUNSET);
+                }
+
                 RenderSystem.shadeModel(7425);
                 matrixStackIn.push();
                 matrixStackIn.rotate(Vector3f.XP.rotationDegrees(90.0F));
@@ -2661,6 +2778,11 @@
 
             if (Config.isSunTexture())
             {
+                if (flag)
+                {
+                    Shaders.setRenderStage(RenderStage.SUN);
+                }
+
                 this.textureManager.bindTexture(SUN_TEXTURES);
                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
                 bufferbuilder.pos(matrix4f1, -f11, 100.0F, -f11).tex(0.0F, 0.0F).endVertex();
@@ -2675,6 +2797,11 @@
 
             if (Config.isMoonTexture())
             {
+                if (flag)
+                {
+                    Shaders.setRenderStage(RenderStage.MOON);
+                }
+
                 this.textureManager.bindTexture(MOON_PHASES_TEXTURES);
                 int k = this.world.getMoonPhase();
                 int l = k % 4;
@@ -2703,6 +2830,11 @@
 
             if (f12 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.world))
             {
+                if (flag)
+                {
+                    Shaders.setRenderStage(RenderStage.STARS);
+                }
+
                 RenderSystem.color4f(f12, f12, f12, f12);
                 this.starVBO.bindBuffer();
                 this.skyVertexFormat.setupBufferState(0L);
@@ -2735,6 +2867,11 @@
 
             if (d0 < 0.0D)
             {
+                if (flag)
+                {
+                    Shaders.setRenderStage(RenderStage.VOID);
+                }
+
                 matrixStackIn.push();
                 matrixStackIn.translate(0.0D, 12.0D, 0.0D);
                 this.sky2VBO.bindBuffer();
@@ -3092,6 +3229,7 @@
             {
                 Shaders.pushProgram();
                 Shaders.useProgram(Shaders.ProgramTexturedLit);
+                Shaders.setRenderStage(RenderStage.WORLD_BORDER);
             }
 
             double d1 = 1.0D - worldborder.getClosestDistance(activeRenderInfoIn.getProjectedView().x, activeRenderInfoIn.getProjectedView().z) / d0;
@@ -3205,6 +3343,7 @@
             if (Config.isShaders())
             {
                 Shaders.popProgram();
+                Shaders.setRenderStage(RenderStage.NONE);
             }
         }
     }
@@ -3213,10 +3352,14 @@
     {
         bufferIn.pos(xIn - camX, (double)yIn - camY, zIn - camZ).tex(texU, texV).endVertex();
     }
-
+    //Vivecraft support colored blockoutline
+    public float selR, selG, selB;
     private void drawSelectionBox(MatrixStack matrixStackIn, IVertexBuilder bufferIn, Entity entityIn, double xIn, double yIn, double zIn, BlockPos blockPosIn, BlockState blockStateIn)
     {
-        drawShape(matrixStackIn, bufferIn, blockStateIn.getShape(this.world, blockPosIn, ISelectionContext.forEntity(entityIn)), (double)blockPosIn.getX() - xIn, (double)blockPosIn.getY() - yIn, (double)blockPosIn.getZ() - zIn, 0.0F, 0.0F, 0.0F, 0.4F);
+        if (!Config.isCustomEntityModels() || !CustomEntityModels.isCustomModel(blockStateIn))
+        {
+            drawShape(matrixStackIn, bufferIn, blockStateIn.getShape(this.world, blockPosIn, ISelectionContext.forEntity(entityIn)), (double)blockPosIn.getX() - xIn, (double)blockPosIn.getY() - yIn, (double)blockPosIn.getZ() - zIn, selR, selG, selB, 0.4F);
+        }
     }
 
     public static void drawVoxelShapeParts(MatrixStack matrixStackIn, IVertexBuilder bufferIn, VoxelShape shapeIn, double xIn, double yIn, double zIn, float red, float green, float blue, float alpha)
@@ -3693,6 +3836,8 @@
     {
         Random random = this.world.rand;
 
+        boolean playernear =  mc.player !=null && mc.player.isAlive() && (mc.player.getPosition().distanceSq(blockPosIn) < 25); ///hmm sure why not.
+        
         switch (type)
         {
             case 1000:
@@ -3755,18 +3900,26 @@
                 break;
 
             case 1011:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1012:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1013:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1014:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3787,14 +3940,26 @@
                 break;
 
             case 1019:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1020:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1021:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
@@ -3823,10 +3988,17 @@
                 break;
 
             case 1030:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,500); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1031:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,1250); 
+                	MCOpenVR.triggerHapticPulse(1,1250); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3847,6 +4019,9 @@
                 break;
 
             case 1036:
+
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -4407,11 +4582,11 @@
         private int setFacing;
         private int counter;
 
-        public LocalRenderInformationContainer(ChunkRenderDispatcher.ChunkRender p_i242105_1_, @Nullable Direction p_i242105_2_, int p_i242105_3_)
+        public LocalRenderInformationContainer(ChunkRenderDispatcher.ChunkRender p_i242106_1_, @Nullable Direction p_i242106_2_, int p_i242106_3_)
         {
-            this.renderChunk = p_i242105_1_;
-            this.facing = p_i242105_2_;
-            this.setFacing = p_i242105_3_;
+            this.renderChunk = p_i242106_1_;
+            this.facing = p_i242106_2_;
+            this.setFacing = p_i242106_3_;
         }
 
         public void setDirection(byte dir, Direction facingIn)
@@ -4439,4 +4614,40 @@
             super(p_i232463_1_, p_i232463_2_);
         }
     }
+   
+    
+    //Vivecraft Additions
+    public void setShaderGroup() {
+        this.field_239227_K_ = null;
+        this.field_239222_F_ = null;
+        this.field_239223_G_ = null;
+        this.field_239224_H_ = null;
+        this.field_239225_I_ = null;
+        this.field_239226_J_ = null;
+        this.alphaSortVRHandsFramebuffer = null;
+        this.alphaSortVROccludedFramebuffer = null;
+        this.alphaSortVRUnoccludedFramebuffer = null;
+
+        ShaderGroup shadergroup = this.mc.stereoProvider.alphaShaders.get(mc.getFramebuffer().name);
+        if (shadergroup != null) { 
+	        this.field_239227_K_ = shadergroup;
+	        this.field_239222_F_ = shadergroup.getFramebufferRaw("translucent");
+	        this.field_239223_G_ = shadergroup.getFramebufferRaw("itemEntity");
+	        this.field_239224_H_ = shadergroup.getFramebufferRaw("particles");
+	        this.field_239225_I_ = shadergroup.getFramebufferRaw("weather");
+	        this.field_239226_J_ = shadergroup.getFramebufferRaw("clouds");
+	        this.alphaSortVRHandsFramebuffer = shadergroup.getFramebufferRaw("vrhands");
+	        this.alphaSortVROccludedFramebuffer = shadergroup.getFramebufferRaw("vroccluded");
+	        this.alphaSortVRUnoccludedFramebuffer = shadergroup.getFramebufferRaw("vrunoccluded");
+        } 
+        
+        this.entityOutlineShader = null;
+        this.entityOutlineFramebuffer = null;
+        shadergroup =  this.mc.stereoProvider.entityShaders.get(mc.getFramebuffer().name);
+        if (shadergroup != null) {
+            this.entityOutlineShader = shadergroup;
+            this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
+        }  
+
+    }
 }
