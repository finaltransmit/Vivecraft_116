--- a/net/minecraft/client/renderer/entity/EntityRendererManager.java
+++ b/net/minecraft/client/renderer/entity/EntityRendererManager.java
@@ -6,6 +6,12 @@
 import java.util.Collections;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.render.VRPlayerRenderer;
+import org.vivecraft.render.PlayerModelController.RotInfo;
+import org.vivecraft.render.RenderPass;
+
 import net.minecraft.block.BlockRenderType;
 import net.minecraft.block.BlockState;
 import net.minecraft.client.GameSettings;
@@ -31,7 +37,6 @@
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.MobEntity;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
-import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
 import net.minecraft.resources.IReloadableResourceManager;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -50,6 +55,7 @@
 import net.optifine.EmissiveTextures;
 import net.optifine.entity.model.CustomEntityModels;
 import net.optifine.player.PlayerItemsLayer;
+import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
 
 public class EntityRendererManager
@@ -58,6 +64,12 @@
     private final Map < EntityType, EntityRenderer> renderers = Maps.newHashMap();
     private final Map<String, PlayerRenderer> skinMap = Maps.newHashMap();
     private final PlayerRenderer playerRenderer;
+	//VIVECRAFT
+	private final Map<String, VRPlayerRenderer> skinMapVR = Maps.<String, VRPlayerRenderer>newHashMap();
+	private final Map<String, VRPlayerRenderer> skinMapVRSeated = Maps.<String, VRPlayerRenderer>newHashMap();
+	private VRPlayerRenderer playerRendererVR;
+	private VRPlayerRenderer playerRendererVRSeated;
+	//
     private final FontRenderer textRenderer;
     public final TextureManager textureManager;
     private World world;
@@ -220,13 +232,51 @@
         }
     }
 
-    public <T extends Entity> EntityRenderer <? super T > getRenderer(T entityIn)
+public <T extends Entity> EntityRenderer <? super T > getRenderer(T entityIn)
     {
         if (entityIn instanceof AbstractClientPlayerEntity)
         {
-            String s = ((AbstractClientPlayerEntity)entityIn).getSkinType();
-            PlayerRenderer playerrenderer = this.skinMap.get(s);
-            return (EntityRenderer <? super T >)(playerrenderer != null ? playerrenderer : this.playerRenderer);
+        	String s = ((AbstractClientPlayerEntity)entityIn).getSkinType();
+        	PlayerRenderer playerrenderer = this.skinMap.get(s);
+        	//VIVECRAFT
+
+        	RotInfo rotinfo = PlayerModelController.getInstance().getRotationsForPlayer(entityIn.getUniqueID());
+        	if(rotinfo!=null)
+        	{
+				Object out = null;
+        		if(rotinfo.seated)
+        		{
+            		if (this.playerRendererVRSeated == null) { // Needs to lazy load cause RenderGlobal
+            			this.playerRendererVRSeated = new VRPlayerRenderer(this, false, true);
+            			this.skinMapVRSeated.put("default", this.playerRendererVRSeated);
+            			this.skinMapVRSeated.put("slim", new VRPlayerRenderer(this, true, true));
+            	        PlayerItemsLayer.register(this.skinMapVRSeated);
+            		}
+            		VRPlayerRenderer renderplayervr = this.skinMapVRSeated.get(s);
+
+    				if(renderplayervr != null) 
+    					out = renderplayervr;
+    				else
+    					out = this.playerRendererVRSeated;
+
+        		} else {
+            		if (this.playerRendererVR == null) { // Needs to lazy load cause RenderGlobal
+            			this.playerRendererVR = new VRPlayerRenderer(this, false, false);
+            			this.skinMapVR.put("default", this.playerRendererVR);
+            			this.skinMapVR.put("slim", new VRPlayerRenderer(this, true, false));
+            	        PlayerItemsLayer.register(this.skinMapVR);
+            		}
+            		VRPlayerRenderer renderplayervr = this.skinMapVR.get(s);
+    				
+    				if(renderplayervr != null) 
+    					out = renderplayervr;
+    				else
+    					out = this.playerRendererVR;
+        		}    		
+    			return (EntityRenderer<? super T>) out;
+        	}  else 
+        		return (EntityRenderer <? super T >) (playerrenderer != null ? playerrenderer : this.playerRenderer);
+        	//
         }
         else
         {
@@ -353,21 +403,28 @@
         {
             float f = entityIn.getWidth() / 2.0F;
             this.renderBoundingBox(matrixStackIn, bufferIn, entityIn, 1.0F, 1.0F, 1.0F);
+            boolean flag = entityIn instanceof EnderDragonEntity;
+
+            if (Reflector.IForgeEntity_isMultipartEntity.exists() && Reflector.IForgeEntity_getParts.exists())
+            {
+                flag = Reflector.callBoolean(entityIn, Reflector.IForgeEntity_isMultipartEntity);
+            }
 
-            if (entityIn instanceof EnderDragonEntity)
+            if (flag)
             {
                 double d0 = -MathHelper.lerp((double)partialTicks, entityIn.lastTickPosX, entityIn.getPosX());
                 double d1 = -MathHelper.lerp((double)partialTicks, entityIn.lastTickPosY, entityIn.getPosY());
                 double d2 = -MathHelper.lerp((double)partialTicks, entityIn.lastTickPosZ, entityIn.getPosZ());
+                Entity[] aentity = (Entity[])(Reflector.IForgeEntity_getParts.exists() ? (Entity[])Reflector.call(entityIn, Reflector.IForgeEntity_getParts) : ((EnderDragonEntity)entityIn).getDragonParts());
 
-                for (EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entityIn).getDragonParts())
+                for (Entity entity : aentity)
                 {
                     matrixStackIn.push();
-                    double d3 = d0 + MathHelper.lerp((double)partialTicks, enderdragonpartentity.lastTickPosX, enderdragonpartentity.getPosX());
-                    double d4 = d1 + MathHelper.lerp((double)partialTicks, enderdragonpartentity.lastTickPosY, enderdragonpartentity.getPosY());
-                    double d5 = d2 + MathHelper.lerp((double)partialTicks, enderdragonpartentity.lastTickPosZ, enderdragonpartentity.getPosZ());
+                    double d3 = d0 + MathHelper.lerp((double)partialTicks, entity.lastTickPosX, entity.getPosX());
+                    double d4 = d1 + MathHelper.lerp((double)partialTicks, entity.lastTickPosY, entity.getPosY());
+                    double d5 = d2 + MathHelper.lerp((double)partialTicks, entity.lastTickPosZ, entity.getPosZ());
                     matrixStackIn.translate(d3, d4, d5);
-                    this.renderBoundingBox(matrixStackIn, bufferIn, enderdragonpartentity, 0.25F, 1.0F, 0.0F);
+                    this.renderBoundingBox(matrixStackIn, bufferIn, entity, 0.25F, 1.0F, 0.0F);
                     matrixStackIn.pop();
                 }
             }
@@ -556,6 +613,44 @@
 
     public Quaternion getCameraOrientation()
     {
+    	//Vivecraft Hack time! This is only used to render sprites 'normal' to the camera, but, 
+    	//as you can see, doesn't work at all, how could it, using a fixed rotation for every sprite?
+    	//Lets do better.  	
+    	if(Minecraft.getInstance().currentPass == RenderPass.GUI)
+    		return info.getRotation();
+    	
+    	Entity renderedEntity = Minecraft.getInstance().worldRenderer.renderedEntity;
+    	if(renderedEntity == null) return info.getRotation(); //how did u get here, boo?
+    	
+    	Vector3d src = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(RenderPass.CENTER).getPosition();    	
+    	if(Minecraft.getInstance().currentPass == RenderPass.THIRD || Minecraft.getInstance().currentPass == RenderPass.CAMERA)
+    		src = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(Minecraft.getInstance().currentPass).getPosition();
+   	
+    	//To not have sprite appear differently in 3rd person, let's have them always point at the player. 
+    	Vector3d dir = renderedEntity.getPositionVec().add(0,renderedEntity.getHeight()/2,0).subtract(src).normalize();
+    	//of course this wants a quaternion. Of course it does.
+        this.cameraOrientation.set(0.0F, 0.0F, 0.0F, 1.0F);   
+        this.cameraOrientation.multiply(Vector3f.YP.rotationDegrees((float)-Math.toDegrees(Math.atan2(-dir.x, dir.z))));
+        this.cameraOrientation.multiply(Vector3f.XP.rotationDegrees((float)-Math.toDegrees(Math.asin(dir.y/dir.length()))));
+        //
+        
+        return this.cameraOrientation;  	
+    }
+    
+    //Vivecraft same as above but for nameplates.
+    public Quaternion getCameraOrientationOffset(float offset)
+    { 	
+    	if(Minecraft.getInstance().currentPass == RenderPass.GUI)
+    		return info.getRotation();
+    	Entity renderedEntity = Minecraft.getInstance().worldRenderer.renderedEntity;
+    	if(renderedEntity == null) return info.getRotation(); //how did u get here, boo? 	
+    	Vector3d src = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(RenderPass.CENTER).getPosition();    	
+    	if(Minecraft.getInstance().currentPass == RenderPass.THIRD || Minecraft.getInstance().currentPass == RenderPass.CAMERA)
+    		src = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(Minecraft.getInstance().currentPass).getPosition();
+    	Vector3d dir = renderedEntity.getPositionVec().add(0,renderedEntity.getHeight() + offset ,0).subtract(src).normalize();
+        this.cameraOrientation.set(0.0F, 0.0F, 0.0F, 1.0F);   
+        this.cameraOrientation.multiply(Vector3f.YP.rotationDegrees((float)-Math.toDegrees(Math.atan2(-dir.x, dir.z))));
+        this.cameraOrientation.multiply(Vector3f.XP.rotationDegrees((float)-Math.toDegrees(Math.asin(dir.y/dir.length()))));        
         return this.cameraOrientation;
     }
 
