--- a/net/minecraft/client/entity/player/ClientPlayerEntity.java
+++ b/net/minecraft/client/entity/player/ClientPlayerEntity.java
@@ -1,11 +1,34 @@
 package net.minecraft.client.entity.player;
 
 import com.google.common.collect.Lists;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import net.minecraft.network.play.client.*;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.physicalinventory.TransactionMutex;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.Debug;
+import org.vivecraft.utils.external.jinfinadeck;
+import org.vivecraft.utils.external.jkatvr;
+
+import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
+import net.minecraft.block.SoundType;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.BiomeSoundHandler;
 import net.minecraft.client.audio.BubbleColumnAmbientSoundHandler;
@@ -23,6 +46,7 @@
 import net.minecraft.client.gui.screen.JigsawScreen;
 import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.inventory.ContainerScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.network.play.ClientPlayNetHandler;
 import net.minecraft.client.util.ClientRecipeBook;
 import net.minecraft.client.world.ClientWorld;
@@ -33,23 +57,15 @@
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.minecart.AbstractMinecartEntity;
 import net.minecraft.inventory.EquipmentSlotType;
+import net.minecraft.inventory.container.ClickType;
 import net.minecraft.item.ElytraItem;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
+import net.minecraft.item.UseAction;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.network.datasync.DataParameter;
-import net.minecraft.network.play.client.CAnimateHandPacket;
-import net.minecraft.network.play.client.CChatMessagePacket;
-import net.minecraft.network.play.client.CClientStatusPacket;
-import net.minecraft.network.play.client.CCloseWindowPacket;
-import net.minecraft.network.play.client.CEntityActionPacket;
-import net.minecraft.network.play.client.CInputPacket;
-import net.minecraft.network.play.client.CMarkRecipeSeenPacket;
-import net.minecraft.network.play.client.CMoveVehiclePacket;
-import net.minecraft.network.play.client.CPlayerAbilitiesPacket;
-import net.minecraft.network.play.client.CPlayerDiggingPacket;
-import net.minecraft.network.play.client.CPlayerPacket;
+import net.minecraft.particles.ItemParticleData;
 import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.Effect;
 import net.minecraft.potion.EffectInstance;
@@ -72,11 +88,14 @@
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.shapes.ISelectionContext;
 import net.minecraft.util.math.shapes.VoxelShape;
 import net.minecraft.util.math.vector.Vector2f;
 import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.world.World;
+import net.optifine.reflect.Reflector;
 
 public class ClientPlayerEntity extends AbstractClientPlayerEntity
 {
@@ -132,6 +151,22 @@
     public MovementInput movementInput;
     protected final Minecraft mc;
     protected int sprintToggleTimer;
+
+    
+    // VIVE START - teleport movement
+    public int movementTeleportTimer;
+	public boolean initFromServer;
+	public boolean teleported;
+    // VIVE END - teleport movement
+    /** MINECRIFT **/
+    public double additionX = 0;
+    public double additionZ = 0;
+    public double additionY = 0;
+    public final float PIOVER180 = (float)Math.PI / 180.0F;
+    /** END MINECRIFT **/
+    
+    
+    /** Ticks left before sprinting is disabled. */
     public int sprintingTicksLeft;
     public float renderArmYaw;
     public float renderArmPitch;
@@ -163,12 +198,93 @@
         this.ambientSoundHandlers.add(new BubbleColumnAmbientSoundHandler(this));
         this.ambientSoundHandlers.add(new BiomeSoundHandler(this, mc.getSoundHandler(), world.getBiomeManager()));
     }
+    //VIVE
+    public void setItemInUseClient(ItemStack item, Hand hand){
+    	this.activeItemStack = item;
+    	if (item != ItemStack.EMPTY) {
+	    	this.handActive = true;
+	    	this.activeHand = hand;
+    	} else {
+    	  	this.handActive = false;
+	    	this.activeHand = hand;
+    	}
+    }
+    
+    public void setItemInUseCountClient(int count){
+    	this.activeItemStackUseCount = count;
+    }
+	
+	HashMap<Pair<Short, Integer>, TransactionMutex> pendingTransactions = new HashMap<>();
+	
+	public boolean windowClickSynced(int windowId, int slotId, int mouseButton, ClickType type, long timeout) {
+		short transactionID = this.openContainer.getNextTransactionID(this.inventory);
+		ItemStack itemstack = this.openContainer.slotClick(slotId, mouseButton, type, this);
+		
+		
+		TransactionMutex mutex = new TransactionMutex();
+		
+		Thread watchdog = new Thread(mc.backgroundThreadGroup,new Runnable() {
+			@Override
+			public void run() {
+				try {
+					Thread.sleep(timeout);
+					
+					synchronized (mutex) {
+						if (mutex.consumed)
+							return;
+						
+						mutex.approved = false;
+						mutex.consumed = true;
+						pendingTransactions.remove(Pair.of(transactionID, windowId));
+						mutex.notifyAll();
+						LogManager.getLogger().warn("Timeout on window operation "+transactionID);
+					}
+				} catch (InterruptedException e) {}
+			}
+		});
+		mutex.watchdog = watchdog;
+		
+		
+		pendingTransactions.put(Pair.of(transactionID, windowId), mutex);
+		try {
+			synchronized (mutex) {
+				this.connection.sendPacket(new CClickWindowPacket(windowId, slotId, mouseButton, type, itemstack, transactionID));
+				watchdog.start();
+				mutex.wait();
+				return mutex.approved;
+			}
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+			return false;
+		}
+	}
+	
+	
+	public void confirmTransaction(short transactionID, int windowId, boolean approved) {
+		TransactionMutex mutex = pendingTransactions.get(Pair.of(transactionID, windowId));
+		if (mutex != null) {
+			synchronized (mutex) {
+				if (mutex.consumed)
+					return; //Avoid race condition with watchdog
+				
+				mutex.watchdog.interrupt();
+				pendingTransactions.remove(Pair.of(transactionID, windowId));
+				mutex.approved = approved;
+				mutex.consumed = true;
+				mutex.notifyAll();
+				
+			}
+		}
+	}
+	
+	//END VIVECRAFT
 
     /**
      * Called when the entity is attacked.
      */
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+
         return false;
     }
 
@@ -179,6 +295,8 @@
     {
     }
 
+    private boolean snapReq = false;
+    
     public boolean startRiding(Entity entityIn, boolean force)
     {
         if (!super.startRiding(entityIn, force))
@@ -198,7 +316,10 @@
                 this.rotationYaw = entityIn.rotationYaw;
                 this.setRotationYawHead(entityIn.rotationYaw);
             }
-
+            //Vivecraft
+            this.mc.vehicleTracker.onStartRiding(entityIn, this);
+    		snapReq = true;
+    		//
             return true;
         }
     }
@@ -207,6 +328,10 @@
     {
         super.dismount();
         this.rowingBoat = false;
+        //Vivecraft
+        this.mc.vehicleTracker.onStopRiding(this);
+		//
+
     }
 
     /**
@@ -233,7 +358,11 @@
         if (this.world.isBlockLoaded(new BlockPos(this.getPosX(), 0.0D, this.getPosZ())))
         {
             super.tick();
-
+            //Vivecarft
+            NetworkHelper.overridePose(this);
+            mc.vrPlayer.doPermanantLookOverride(this, mc.vrPlayer.vrdata_world_pre);
+            //
+            
             if (this.isPassenger())
             {
                 this.connection.sendPacket(new CPlayerPacket.RotationPacket(this.rotationYaw, this.rotationPitch, this.onGround));
@@ -304,29 +433,44 @@
             boolean flag1 = d4 * d4 + d0 * d0 + d1 * d1 > 9.0E-4D || this.positionUpdateTicks >= 20;
             boolean flag2 = d2 != 0.0D || d3 != 0.0D;
 
-            if (this.isPassenger())
-            {
-                Vector3d vector3d = this.getMotion();
-                this.connection.sendPacket(new CPlayerPacket.PositionRotationPacket(vector3d.x, -999.0D, vector3d.z, this.rotationYaw, this.rotationPitch, this.onGround));
-                flag1 = false;
-            }
-            else if (flag1 && flag2)
-            {
-                this.connection.sendPacket(new CPlayerPacket.PositionRotationPacket(this.getPosX(), this.getPosY(), this.getPosZ(), this.rotationYaw, this.rotationPitch, this.onGround));
-            }
-            else if (flag1)
-            {
-                this.connection.sendPacket(new CPlayerPacket.PositionPacket(this.getPosX(), this.getPosY(), this.getPosZ(), this.onGround));
+            //Vivecraft direct teleporting
+            if(teleported){
+            	teleported = false;
+            	flag2 = true;
+            	ByteBuf payload = Unpooled.buffer();
+            	payload.writeFloat((float) this.getPosX());
+            	payload.writeFloat((float) this.getPosY());
+            	payload.writeFloat((float) this.getPosZ());
+            	byte[] out = new byte[payload.readableBytes()];
+            	payload.readBytes(out);
+            	CCustomPayloadPacket pack = NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.TELEPORT,out);
+            	this.connection.sendPacket(pack);
+            } else {	
+            //
+            	if (this.isPassenger())
+            	{
+            		Vector3d vector3d = this.getMotion();
+            		this.connection.sendPacket(new CPlayerPacket.PositionRotationPacket(vector3d.x, -999.0D, vector3d.z, this.rotationYaw, this.rotationPitch, this.onGround));
+            		flag1 = false;
+            	}
+            	else if (flag1 && flag2)
+            	{
+            		this.connection.sendPacket(new CPlayerPacket.PositionRotationPacket(this.getPosX(), this.getPosY(), this.getPosZ(), this.rotationYaw, this.rotationPitch, this.onGround));
+            	}
+            	else if (flag1)
+            	{
+            		this.connection.sendPacket(new CPlayerPacket.PositionPacket(this.getPosX(), this.getPosY(), this.getPosZ(), this.onGround));
+            	}
+            	else if (flag2)
+            	{
+            		this.connection.sendPacket(new CPlayerPacket.RotationPacket(this.rotationYaw, this.rotationPitch, this.onGround));
+            	}
+            	else if (this.prevOnGround != this.onGround)
+            	{
+            		this.connection.sendPacket(new CPlayerPacket(this.onGround));
+            	}
             }
-            else if (flag2)
-            {
-                this.connection.sendPacket(new CPlayerPacket.RotationPacket(this.rotationYaw, this.rotationPitch, this.onGround));
-            }
-            else if (this.prevOnGround != this.onGround)
-            {
-                this.connection.sendPacket(new CPlayerPacket(this.onGround));
-            }
-
+            	
             if (flag1)
             {
                 this.lastReportedPosX = this.getPosX();
@@ -342,6 +486,13 @@
             }
 
             this.prevOnGround = this.onGround;
+            
+            //VIVECRAFT
+ //           mc.interactTracker.IAmLookingAtMyHand[0] = mc.interactTracker.shouldIlookatMyHand[0];
+ //           mc.interactTracker.IAmLookingAtMyHand[1] = mc.interactTracker.shouldIlookatMyHand[1];
+            if(mc.vrSettings.walkUpBlocks) mc.gameSettings.autoJump = false;
+            //END VIVECRAFT
+            
             this.autoJumpEnabled = this.mc.gameSettings.autoJump;
         }
     }
@@ -359,10 +510,31 @@
     public void sendChatMessage(String message)
     {
         this.connection.sendPacket(new CChatMessagePacket(message));
+        lastMsg = message;
     }
 
+    public String lastMsg = null;
+   
+    //Vivecraft
+    public void swingArm(Hand hand, VRFirstPersonArmSwing animation) {
+    	mc.getFirstPersonRenderer().swingType = animation;
+    	this.swingArm(hand);
+    }
+    ///
+    
     public void swingArm(Hand hand)
     {
+    	//Vivecraft
+    	if(!this.isSwingInProgress) {
+            if (mc.objectMouseOver != null && mc.objectMouseOver.getType() != RayTraceResult.Type.MISS ) {
+        		mc.getFirstPersonRenderer().xdist = (float) mc.objectMouseOver.getHitVec().subtract(
+            			mc.vrPlayer.vrdata_world_pre.getController(hand.ordinal()).getPosition()).length();    
+            } else {
+            	mc.getFirstPersonRenderer().xdist = 0;
+            }
+    	}
+    	//
+    	
         super.swingArm(hand);
         this.connection.sendPacket(new CAnimateHandPacket(hand));
     }
@@ -640,7 +812,24 @@
 
     public void playSound(SoundEvent soundIn, float volume, float pitch)
     {
-        this.world.playSound(this.getPosX(), this.getPosY(), this.getPosZ(), soundIn, this.getSoundCategory(), volume, pitch, false);
+        SoundCategory category = this.getSoundCategory();
+        //Forge
+        if (Reflector.ForgeEventFactory_onPlaySoundAtEntity.exists())
+        {
+            Object object = Reflector.ForgeEventFactory_onPlaySoundAtEntity.call(this, soundIn, this.getSoundCategory(), volume, pitch);
+
+            if (Reflector.callBoolean(object, Reflector.Event_isCanceled) || Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound) == null)
+            {
+                return;
+            }
+
+            soundIn = (SoundEvent)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound);
+            category = (SoundCategory)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getCategory);
+            volume = Reflector.callFloat(object, Reflector.PlaySoundAtEntityEvent_getVolume);
+        }
+        //
+        this.world.playSound(this.getPosX(), this.getPosY(), this.getPosZ(), soundIn, category, volume, pitch, false);
+
     }
 
     public void playSound(SoundEvent p_213823_1_, SoundCategory p_213823_2_, float p_213823_3_, float p_213823_4_)
@@ -818,11 +1007,14 @@
         }
 
         this.handlePortalTeleportation();
-        boolean flag = this.movementInput.jump;
-        boolean flag1 = this.movementInput.sneaking;
-        boolean flag2 = this.isUsingSwimmingAnimation();
+        boolean _lastTickJump = this.movementInput.jump;
+        boolean _lastTickSneak = this.movementInput.sneaking;
+        boolean _lastTickSwim = this.isUsingSwimmingAnimation();
         this.isCrouching = !this.abilities.isFlying && !this.isSwimming() && this.isPoseClear(Pose.CROUCHING) && (this.isSneaking() || !this.isSleeping() && !this.isPoseClear(Pose.STANDING));
         this.movementInput.tickMovement(this.isForcedDown());
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_onInputUpdate, this, this.movementInput);
+        //
         this.mc.getTutorial().handleMovement(this.movementInput);
 
         if (this.isHandActive() && !this.isPassenger())
@@ -832,12 +1024,12 @@
             this.sprintToggleTimer = 0;
         }
 
-        boolean flag3 = false;
+        boolean _isAutoJump = false;
 
         if (this.autoJumpTime > 0)
         {
             --this.autoJumpTime;
-            flag3 = true;
+            _isAutoJump = true;
             this.movementInput.jump = true;
         }
 
@@ -849,14 +1041,14 @@
             this.setPlayerOffsetMotion(this.getPosX() + (double)this.getWidth() * 0.35D, this.getPosZ() + (double)this.getWidth() * 0.35D);
         }
 
-        if (flag1)
+        if (_lastTickSneak)
         {
             this.sprintToggleTimer = 0;
         }
 
         boolean flag4 = (float)this.getFoodStats().getFoodLevel() > 6.0F || this.abilities.allowFlying;
 
-        if ((this.onGround || this.canSwim()) && !flag1 && !flag2 && this.isUsingSwimmingAnimation() && !this.isSprinting() && flag4 && !this.isHandActive() && !this.isPotionActive(Effects.BLINDNESS))
+        if ((this.onGround || this.canSwim()) && !_lastTickSneak && !_lastTickSwim && this.isUsingSwimmingAnimation() && !this.isSprinting() && flag4 && !this.isHandActive() && !this.isPotionActive(Effects.BLINDNESS))
         {
             if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown())
             {
@@ -891,7 +1083,7 @@
             }
         }
 
-        boolean flag7 = false;
+        boolean _isCreativeFly = false;
 
         if (this.abilities.allowFlying)
         {
@@ -900,11 +1092,11 @@
                 if (!this.abilities.isFlying)
                 {
                     this.abilities.isFlying = true;
-                    flag7 = true;
+                    _isCreativeFly = true;
                     this.sendPlayerAbilities();
                 }
             }
-            else if (!flag && this.movementInput.jump && !flag3)
+            else if (!_lastTickJump && this.movementInput.jump && !_isAutoJump)
             {
                 if (this.flyToggleTimer == 0)
                 {
@@ -913,18 +1105,24 @@
                 else if (!this.isSwimming())
                 {
                     this.abilities.isFlying = !this.abilities.isFlying;
-                    flag7 = true;
+                    _isCreativeFly = true;
                     this.sendPlayerAbilities();
                     this.flyToggleTimer = 0;
                 }
             }
         }
 
-        if (this.movementInput.jump && !flag7 && !flag && !this.abilities.isFlying && !this.isPassenger() && !this.isOnLadder())
+        if ((this.movementInput.jump /* <VR> */ || (mc.flightTracker.wingsExtended(this) && this.getMotion().y < -0.2f )/* </VR> */) && !_isCreativeFly && !_lastTickJump && !this.abilities.isFlying && !this.isPassenger() && !this.isOnLadder())
         {
             ItemStack itemstack = this.getItemStackFromSlot(EquipmentSlotType.CHEST);
 
-            if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isUsable(itemstack) && this.tryToStartFallFlying())
+            //Forge
+            boolean eflag = itemstack.getItem() == Items.ELYTRA && ElytraItem.isUsable(itemstack);
+            if(Reflector.IForgeItemStack_canElytraFly.exists()) 
+            	eflag = Reflector.callBoolean(itemstack, Reflector.IForgeItemStack_canElytraFly, this);
+            
+            //Forge
+            if (eflag && this.tryToStartFallFlying()) 
             {
                 this.connection.sendPacket(new CEntityActionPacket(this, CEntityActionPacket.Action.START_FALL_FLYING));
             }
@@ -982,18 +1180,18 @@
                 }
             }
 
-            if (flag && !this.movementInput.jump)
+            if (_lastTickJump && !this.movementInput.jump)
             {
                 this.horseJumpPowerCounter = -10;
                 ijumpingmount.setJumpPower(MathHelper.floor(this.getHorseJumpPower() * 100.0F));
                 this.sendHorseJump();
             }
-            else if (!flag && this.movementInput.jump)
+            else if (!_lastTickJump && this.movementInput.jump)
             {
                 this.horseJumpPowerCounter = 0;
                 this.horseJumpPower = 0.0F;
             }
-            else if (flag)
+            else if (_lastTickJump)
             {
                 ++this.horseJumpPowerCounter;
 
@@ -1013,6 +1211,9 @@
         }
 
         super.livingTick();
+        // VIVE START - teleport movement
+        mc.vrPlayer.tick(this, this.mc, this.rand);
+        // VIVE END - teleport movement
 
         if (this.onGround && this.abilities.isFlying && !this.mc.playerController.isSpectatorMode())
         {
@@ -1114,12 +1315,65 @@
         return super.removeActivePotionEffect(potioneffectin);
     }
 
+    private Vector3d  moveMulIn;
+    
+    @Override
     public void move(MoverType typeIn, Vector3d pos)
     {
-        double d0 = this.getPosX();
-        double d1 = this.getPosZ();
-        super.move(typeIn, pos);
-        this.updateAutoJump((float)(this.getPosX() - d0), (float)(this.getPosZ() - d1));
+    	moveMulIn = this.motionMultiplier; 	 //motionMultiplier gets zeroed in the super call.
+    	
+    	if(pos.length() == 0 || this.isPassenger()) {
+    		super.move(typeIn, pos);
+    		return;
+    	}
+
+    	boolean freemove = OpenVRPlayer.get().getFreeMove();
+    	boolean doY = freemove || (Minecraft.getInstance().vrSettings.simulateFalling && !this.isOnLadder()) && !this.isSneaking();
+    	if(mc.climbTracker.isActive(this) && (freemove || mc.climbTracker.isGrabbingLadder())) doY = true;
+    	Vector3d roomOrigin = OpenVRPlayer.get().roomOrigin;
+    	//   	Vec3 camloc = Minecraft.getInstance().vrPlayer.getHMDPos_World();
+
+    	if ( (mc.climbTracker.isGrabbingLadder() || freemove || mc.swimTracker.isActive(this)) && 
+    			(this.moveForward != 0 || this.isElytraFlying() || Math.abs(this.getMotion().x) > 0.01 || Math.abs(this.getMotion().z) > 0.01))
+    	{
+    		double ox = roomOrigin.x - getPosX();
+    		double oz = roomOrigin.z - getPosZ();
+    		double d0 = this.getPosX();
+    		double d1 = this.getPosZ();
+    		super.move(typeIn, pos);
+    		if(mc.vrSettings.walkUpBlocks)
+    			this.stepHeight = this.getMuhJumpFactor() == 1 ? 1 : 0.6f;
+    		else {
+    			this.stepHeight = 0.6f;
+    			this.updateAutoJump((float)(this.getPosX() - d0), (float)(this.getPosZ() - d1));
+    		}
+    		double oy = this.getPosY() + this.getRoomYOffsetFromPose();
+    		OpenVRPlayer.get().setRoomOrigin(
+    				getPosX() + ox, 
+    				oy, 
+    				getPosZ()  + oz, false);
+    	} else {
+    		if(doY) {      	 
+    			super.move(typeIn,new Vector3d(0,pos.y,0));
+    			OpenVRPlayer.get().setRoomOrigin(
+    					OpenVRPlayer.get().roomOrigin.x, 
+    					this.getPosY() + this.getRoomYOffsetFromPose(),
+    					OpenVRPlayer.get().roomOrigin.z, false);
+    		} else {
+    			this.onGround = true; //
+    			//do not move player, VRPlayer.moveplayerinroom will move him around.
+    		}
+    	}   		
+    }
+    
+    public double getRoomYOffsetFromPose() {
+		double oy = 0;
+		//Adjust room origin to account for pose, only when not standing on something.
+		if(this.getPose() == Pose.FALL_FLYING || 
+				this.getPose() == Pose.SPIN_ATTACK || 
+                (this.getPose() == Pose.SWIMMING && !mc.crawlTracker.crawlsteresis))
+			oy = -1.2;
+		return oy;
     }
 
     public boolean isAutoJumpEnabled()
@@ -1137,13 +1391,17 @@
             float f = this.getAIMoveSpeed();
             float f1 = (float)vector3d2.lengthSquared();
 
+            //VIVE
+            float yaw = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getBodyYaw();
+               
             if (f1 <= 0.001F)
             {
                 Vector2f vector2f = this.movementInput.getMoveVector();
                 float f2 = f * vector2f.x;
                 float f3 = f * vector2f.y;
-                float f4 = MathHelper.sin(this.rotationYaw * ((float)Math.PI / 180F));
-                float f5 = MathHelper.cos(this.rotationYaw * ((float)Math.PI / 180F));
+                        float f4 = MathHelper.sin(yaw * 0.017453292F);
+                        float f5 = MathHelper.cos(yaw * 0.017453292F);
+                        //END VIVE
                 vector3d2 = new Vector3d((double)(f2 * f5 - f3 * f4), vector3d2.y, (double)(f3 * f5 + f2 * f4));
                 f1 = (float)vector3d2.lengthSquared();
 
@@ -1345,4 +1603,407 @@
             return super.getLeashPosition(partialTicks);
         }
     }
+// VIVECREAFT ADDITIONS
+    
+    
+    /**
+     * Sets the location and Yaw/Pitch of an entity in the world
+     */
+    @Override
+    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
+   {
+    	super.setLocationAndAngles(x, y, z, yaw, pitch);
+
+    	//Vivecraft - this is for when the server moves the player entity, such as spawning, dimension change
+    	//or dismount.
+    	if(!initFromServer) 
+    		return;
+    	
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw; this was a terrible idea
+    }
+    
+    @Override
+    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch)
+    {
+        super.setPositionAndRotation(x, y, z, yaw, pitch);
+		
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw;
+
+		if(initFromServer == false){
+			this.setLocationAndAngles(x, y, z, yaw, pitch);
+            initFromServer = true;    
+        }
+    }
+    
+    // VIVE START - update room origin when player entity is moved
+    @Override
+    public void setPosition(double x, double y, double z)
+    { //this is also called when riding to move this around.
+		
+    	double bx = this.getPosX();
+    	double by = this.getPosY();
+    	double bz = this.getPosZ();
+
+    	super.setPosition(x, y, z);
+
+    	double ax = this.getPosX();
+    	double ay = this.getPosY();
+    	double az = this.getPosZ();   	
+
+    		Entity mount = this.getRidingEntity();
+    				
+            if (isPassenger()){          	
+    			Vector3d offset = mc.vehicleTracker.Premount_Pos_Room;
+    			offset = offset.rotateYaw(mc.vrPlayer.vrdata_world_pre.rotation_radians);    			
+    			Entity e= mount;
+    			x = x - offset.x;
+    			y = mc.vehicleTracker.getVehicleFloor(mount, y);
+    			z = z - offset.z;
+    			mc.vrPlayer.setRoomOrigin(x, y, z, x+y+z==0);   		
+            } else {
+        		Vector3d roomOrigin = Minecraft.getInstance().vrPlayer.roomOrigin;
+          		OpenVRPlayer.get().setRoomOrigin(
+          				roomOrigin.x + (ax - bx),
+          				roomOrigin.y + (ay - by),
+          				roomOrigin.z + (az - bz),
+          				x+y+z==0
+          				);
+            }
+            
+   // 	} 
+    }
+        
+    
+    /** MINECRIFT **/
+    public void doDrag()
+    {
+
+    	float var3 = 0.91F;
+
+    	if (this.onGround)
+    	{
+    		var3 = this.world.getBlockState(new BlockPos(this.getPosX(), this.getBoundingBox().minY - 1.0D, this.getPosZ())).getBlock().getSlipperiness() * 0.91F;
+    	}
+
+    	double xFactor = var3;
+    	double zFactor = var3;
+
+    	//VIVECRAFT account for stock drag code we can't change in EntityLivingBase
+    	this.setMotion(this.getMotion().x / xFactor, this.getMotion().y, this.getMotion().z / zFactor);
+    	//
+
+//    	if(!mc.vrSettings.seated && !this.onGround && !this.isElytraFlying() && !this.hasNoGravity() && mc.jumpTracker.isClimbeyJumpEquipped() && mc.vrSettings.realisticJumpEnabled) return; //no drag for jump boots.
+//    	if(mc.climbTracker.isGrabbingLadder()) return; //no drag for climb.
+	
+    	int inertiaFactor = Minecraft.getInstance().vrSettings.inertiaFactor;
+    	double addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    	double boundedAdditionX = getBoundedAddition(additionX);
+    	double targetLimitX = (var3 * boundedAdditionX) / (1f - var3);
+    	double multiFactorX = targetLimitX / (var3 * (targetLimitX + (boundedAdditionX * addFactor)));
+    	xFactor *= multiFactorX;
+
+    	double boundedAdditionZ = getBoundedAddition(additionZ);
+    	double targetLimitZ = (var3 * boundedAdditionZ) / (1f - var3);
+    	double multiFactorZ = targetLimitZ / (var3 * (targetLimitZ + (boundedAdditionZ * addFactor)));
+    	zFactor *= multiFactorZ;
+    	
+    	this.setMotion(this.getMotion().x * xFactor, this.getMotion().y, this.getMotion().z * zFactor);
+    }
+    
+    public double getBoundedAddition(double orig)
+    {
+        if (orig >= -1.0E-6D && orig <= 1.0E-6D) {
+            return 1.0E-6D;
+        }
+        else {
+            return orig;
+        }
+    }
+           
+    @Override
+    public void moveRelative(float friction, Vector3d move) 
+    {
+    	//   	super.moveFlying(strafe, forward, friction);
+
+    	double up = move.y;
+    	double strafe = move.x;
+    	double forward = move.z;
+
+    	OpenVRPlayer vr = mc.vrPlayer;		
+    	if (!vr.getFreeMove()) {return;}
+
+    	int inertiaFactor = Minecraft.getInstance().vrSettings.inertiaFactor;
+    	double speed = strafe * strafe + forward * forward;
+
+    	double mX = 0d;
+    	double mZ = 0d;
+    	double mY = 0d;
+    	double addFactor = 1f;
+
+    	if (speed >= 1.0E-4F || Main.katvr)
+    	{
+    		speed = MathHelper.sqrt(speed);
+
+    		if (speed < 1.0F && !Main.katvr)
+    		{
+    			speed = 1.0F;
+    		}
+
+    		speed = friction / speed;
+    		strafe *= speed;
+    		forward *= speed;
+    		Vector3d directionVec = new Vector3d(strafe, 0,forward);
+    		OpenVRPlayer con = mc.vrPlayer;
+    		boolean doPitch =  !this.isPassenger() && (this.abilities.isFlying || this.isSwimming());
+
+    		if(Main.katvr){
+    			jkatvr.query();
+
+    			speed =  jkatvr.getSpeed() * jkatvr.walkDirection() * mc.vrSettings.movementSpeedMultiplier;
+    			directionVec = new Vector3d(0, 0,speed);
+    			if(doPitch) 
+    				directionVec=directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);				
+    			directionVec=directionVec.rotateYaw(-jkatvr.getYaw()* PIOVER180 + mc.vrPlayer.vrdata_world_pre.rotation_radians);	    		
+    		}     		
+    		else if(Main.infinadeck){
+    			jinfinadeck.query();
+
+    			speed =  jinfinadeck.getSpeed() * jinfinadeck.walkDirection() * mc.vrSettings.movementSpeedMultiplier;
+    			directionVec = new Vector3d(0, 0,speed);
+    			if(doPitch) 
+    				directionVec=directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);				
+    			directionVec=directionVec.rotateYaw(-jinfinadeck.getYaw()* PIOVER180 + mc.vrPlayer.vrdata_world_pre.rotation_radians);	    		
+
+    		}else if(mc.vrSettings.seated){
+    			int c = 0;
+    			if(mc.vrSettings.seatedUseHMD) c = 1;
+    			if(doPitch) 
+    				directionVec=directionVec.rotatePitch(con.vrdata_world_pre.getController(c).getPitch()* PIOVER180);				
+    			directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.getController(c).getYaw() * PIOVER180);	    	
+    		}else{
+
+    			if(doPitch) {
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.getController(1).getPitch()  * PIOVER180);		   
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    				case VRSettings.FREEMOVE_RUNINPLACE: 
+    				case VRSettings.FREEMOVE_ROOM:
+    					//hmd pitch
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);	
+    					break;
+    				}
+    			}
+
+    			if(mc.jumpTracker.isjumping()){
+    				directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);		
+    			}else{
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.getController(1).getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_RUNINPLACE:
+    					directionVec = directionVec.rotateYaw((float) (-mc.runTracker.getYaw() * PIOVER180));
+    					directionVec = directionVec.scale(mc.runTracker.getSpeed());
+    					break;
+    				case VRSettings.FREEMOVE_ROOM:
+    					directionVec = directionVec.rotateYaw((180+mc.vrSettings.vrWorldRotation) * PIOVER180);	
+    					break;
+    				}
+    			}
+    		}
+
+    		mX = directionVec.x;
+    		mY = directionVec.y;
+    		mZ = directionVec.z;
+
+    		// Modify acceleration sequence (each tick)
+    		if(!this.abilities.isFlying && !this.inWater) addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    		float yAdd = 1f;
+    		if(this.abilities.isFlying) yAdd = 5f; //HACK
+
+    		this.setMotion(this.getMotion().x + (mX * addFactor) , 
+    				this.getMotion().y + (mY * yAdd) , 
+    				this.getMotion().z + (mZ * addFactor) );
+
+
+    		this.additionX = mX;
+    		this.additionZ = mZ;
+    	} 
+
+    	//if (this instanceof EntityPlayerSP) {
+    	//    System.out.println(String.format("FLYING: %B, forward: %.4f, strafe: %.4f, pitch: %.4f, yaw: %.4f, mx: %.4f, mz: %.4f, my: %.4f", allowYAdjust, forward, strafe, this.headPitch, this.rotationYaw, mX, mZ, mY));
+    	//}
+
+    	if(!this.abilities.isFlying && !this.inWater) doDrag();       //TODO put back intertia while flying.. doesnt work for some reason. 
+
+    	/** END MINECRIFT **/
+
+    }
+
+    private boolean isThePlayer(){
+    	return this == Minecraft.getInstance().player;
+    }
+
+    //Vivecraft override from LivingEntity because addItemParticles is private
+    @Override
+    protected void triggerItemUseEffects(ItemStack stack, int count)
+    {
+    	if (!stack.isEmpty() && this.isHandActive())
+    	{
+    		if (stack.getUseAction() == UseAction.DRINK)
+    		{
+    			this.playSound(this.getDrinkSound(stack), 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+    		}
+
+    		if (stack.getUseAction() == UseAction.EAT)
+    		{
+    			this.addItemParticles(stack, count);
+    			this.playSound(this.getEatSound(stack), 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+    		}
+    	}
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+
+    	for (int i = 0; i < count; ++i)
+    	{
+    		Vector3d vector3d = new Vector3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+    		vector3d = vector3d.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+    		vector3d = vector3d.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+    		double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+    		Vector3d vector3d1 = new Vector3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    		//VIVE
+    		Hand hand = getActiveHand();
+    		if(hand == Hand.MAIN_HAND){
+    			vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();                 	
+    		} else {
+    			vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();                 	
+    		}
+    		// vector3d1 = vector3d1.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+    		// vector3d1 = vector3d1.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+    		// vector3d1 = vector3d1.add(this.getPosX(), this.getPosYEye(), this.getPosZ());
+    		//
+    		this.world.addParticle(new ItemParticleData(ParticleTypes.ITEM, stack), vector3d1.x, vector3d1.y, vector3d1.z, vector3d.x, vector3d.y + 0.05D, vector3d.z);
+    	}
+    }
+
+    public boolean isClimbeyJumpEquipped(){
+
+    	if(this.getItemStackFromSlot(EquipmentSlotType.FEET) != null){
+    		if(mc.jumpTracker.isBoots(this.getItemStackFromSlot(EquipmentSlotType.FEET))) 
+    			return true;
+    	}
+
+    	return false;
+
+    }
+
+    public boolean isClimbeyClimbEquipped(){
+
+    	if(this.getHeldItemMainhand() != null){
+    		if(mc.climbTracker.isClaws(this.getHeldItemMainhand())) 
+    			return true;
+    	}
+
+    	if(this.getHeldItemOffhand() != null){
+    		if(mc.climbTracker.isClaws(this.getHeldItemOffhand())) 
+    			return true;
+    	}
+
+    	return false;
+    }
+
+    /**
+     * Called when the mob's health reaches 0.
+     */
+    @Override
+    public void onDeath(DamageSource cause){
+
+    	super.onDeath(cause);
+    	MCOpenVR.triggerHapticPulse(0, 2000);
+    	MCOpenVR.triggerHapticPulse(1, 2000);    	
+
+    }
+
+    public void stepSound(BlockPos blockforNoise, Vector3d soundPos){
+    	BlockState bs = this.world.getBlockState(blockforNoise);
+    	Block b = bs.getBlock();
+    	SoundType soundtype = b.getSoundType(bs);
+
+    	BlockState bsup = this.world.getBlockState(blockforNoise.up());
+    	if (bsup.getBlock() == Blocks.SNOW)
+    	{
+    		soundtype = Blocks.SNOW.getSoundType(bsup);
+    	}
+
+    	float volume = soundtype.getVolume();
+    	float pitch = soundtype.getPitch();
+    	SoundEvent soundIn = soundtype.getStepSound();
+
+    	if (!this.isSilent() && !b.getDefaultState().getMaterial().isLiquid())
+    	{
+    		this.world.playSound((ClientPlayerEntity)null, soundPos.x, soundPos.y, soundPos.z, soundIn, this.getSoundCategory(), volume, pitch);
+    	}
+    }
+
+	// FORGE
+    public void updateSyncFields(ClientPlayerEntity old)
+    {
+        this.lastReportedPosX = old.lastReportedPosX;
+        this.lastReportedPosY = old.lastReportedPosY;
+        this.lastReportedPosZ = old.lastReportedPosZ;
+        this.lastReportedYaw = old.lastReportedYaw;
+        this.lastReportedPitch = old.lastReportedPitch;
+        this.prevOnGround = old.prevOnGround;
+        this.clientSneakState = old.clientSneakState;
+        this.serverSprintState = old.serverSprintState;
+        this.positionUpdateTicks = old.positionUpdateTicks;
+    }
+    
+    @Override
+    public ItemStack onFoodEaten(World p_213357_1_, ItemStack p_213357_2_) {
+    	if (p_213357_2_.isFood())
+        {
+        	// Just wanna be safe here, I dunno if this is ever called on the client for non-self
+    		if (this == Minecraft.getInstance().player && p_213357_2_.getDisplayName().getString().equals("EAT ME")) {
+    			Minecraft.getInstance().vrPlayer.wfMode = 0.5f;
+    			Minecraft.getInstance().vrPlayer.wfCount = 400;
+    		}
+
+    		mc.hapticTracker.handleEat(p_213357_2_);
+        }
+        return super.onFoodEaten(p_213357_1_, p_213357_2_);  	
+    }
+    
+    public float getMuhJumpFactor()
+    {
+    	if(moveMulIn.lengthSquared() > 0) {
+    		return (float) (this.getJumpFactor() * moveMulIn.y);
+    	} else
+    		return this.getJumpFactor();
+    }
+    
+    public float getMuhSpeedFactor()
+    {
+    	if(moveMulIn.lengthSquared() > 0) {
+    		return (float) (this.getSpeedFactor() * (moveMulIn.x + moveMulIn.z) / 2);
+    	} else
+    		return this.getSpeedFactor();
+    }
+    
+    @Override
+    public void stopActiveHand() {
+    	NetworkHelper.sendActiveHand((byte) this.getActiveHand().ordinal());
+    	super.stopActiveHand();
+    }
 }
