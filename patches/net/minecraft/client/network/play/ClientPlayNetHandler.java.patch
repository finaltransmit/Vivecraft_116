--- a/net/minecraft/client/network/play/ClientPlayNetHandler.java
+++ b/net/minecraft/client/network/play/ClientPlayNetHandler.java
@@ -277,7 +277,6 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.Direction;
 import net.minecraft.util.Hand;
-import net.minecraft.util.MovementInputFromOptions;
 import net.minecraft.util.RegistryKey;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.SoundCategory;
@@ -304,8 +303,17 @@
 import net.minecraft.world.chunk.NibbleArray;
 import net.minecraft.world.lighting.WorldLightManager;
 import net.minecraft.world.storage.MapData;
+import net.optifine.reflect.Reflector;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.control.ControllerType;
+import org.vivecraft.control.VivecraftMovementInput;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.settings.VRSettings;
 
 public class ClientPlayNetHandler implements IClientPlayNetHandler
 {
@@ -367,6 +375,10 @@
         this.profile = profileIn;
         this.advancementManager = new ClientAdvancementManager(mcIn);
         this.clientSuggestionProvider = new ClientSuggestionProvider(this, mcIn);
+        //VIVECRAFT
+        NetworkHelper.resetServerSettings();
+        NetworkHelper.displayedChatMessage = false;
+        //
     }
 
     public ClientSuggestionProvider getSuggestionProvider()
@@ -428,9 +440,14 @@
 
         this.client.debugRenderer.clear();
         this.client.player.preparePlayerToSpawn();
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerLogin, this.client.playerController, this.client.player, this.client.getConnection().getNetworkManager());
+        //
         int i = packetIn.getPlayerId();
         this.world.addPlayer(i, this.client.player);
-        this.client.player.movementInput = new MovementInputFromOptions(this.client.gameSettings);
+        //Vivecraft
+        this.client.player.movementInput = new VivecraftMovementInput(this.client.gameSettings);
+        //
         this.client.playerController.setPlayerCapabilities(this.client.player);
         this.client.renderViewEntity = this.client.player;
         this.client.displayGuiScreen(new DownloadTerrainScreen());
@@ -439,9 +456,16 @@
         this.client.player.setShowDeathScreen(packetIn.func_229743_k_());
         this.client.playerController.setGameType(packetIn.getGameType());
         this.client.playerController.func_241675_a_(packetIn.func_241786_f_());
+        //Forge
+        Reflector.call(Reflector.NetworkHooks_sendMCRegistryPackets, netManager, "PLAY_TO_SERVER");
+        //
         this.client.gameSettings.sendSettingsToServer();
         this.netManager.sendPacket(new CCustomPayloadPacket(CCustomPayloadPacket.BRAND, (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
         this.client.getMinecraftGame().startGameSession();
+        // VIVE START - ask server if it's running this mod
+        NetworkHelper.vivePlayers.clear();
+        NetworkHelper.sendVersionInfo();
+        // VIVE END - ask server if it's running this mod
     }
 
     /**
@@ -961,7 +985,10 @@
 
             if (tileentity != null)
             {
-                tileentity.read(this.world.getBlockState(blockpos), compoundnbt);
+            	if(Reflector.IForgeTileEntity_handleUpdateTag.exists())
+            		Reflector.call(tileentity, Reflector.IForgeTileEntity_handleUpdateTag,this.world.getBlockState(blockpos), compoundnbt);
+            	else
+	                tileentity.read(this.world.getBlockState(blockpos), compoundnbt);
             }
         }
     }
@@ -999,6 +1026,11 @@
     public void handleDisconnect(SDisconnectPacket packetIn)
     {
         this.netManager.closeChannel(packetIn.getReason());
+    	// VIVE START - no longer on a vanilla server, reset restricted state
+        this.client.vrPlayer.setTeleportSupported(false);
+        this.client.vrPlayer.setTeleportOverride(false);
+        this.client.vrSettings.overrides.resetAll();
+    	// VIVE END - no longer on a vanilla server, reset restricted state  
     }
 
     /**
@@ -1077,8 +1109,36 @@
      */
     public void handleChat(SChatPacket packetIn)
     {
-        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        this.client.ingameGUI.func_238450_a_(packetIn.getType(), packetIn.getChatComponent(), packetIn.func_240810_e_());
+    	//Forge
+    	PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
+    	net.minecraft.util.text.ITextComponent message = (ITextComponent) Reflector.call(Reflector.ForgeEventFactory_onClientChat, packetIn.getType(), packetIn.getChatComponent(), packetIn.func_240810_e_());
+    	if (message == null)     	
+    		this.client.ingameGUI.func_238450_a_(packetIn.getType(), packetIn.getChatComponent(), packetIn.func_240810_e_());
+    	else
+    		this.client.ingameGUI.func_238450_a_(packetIn.getType(), message, packetIn.func_240810_e_());
+		//
+    	//Vivecraft
+    	Minecraft mc = Minecraft.getInstance();
+    	String tmp = mc.player.lastMsg;  		
+    	mc.player.lastMsg = null;
+
+    	if(mc.player != null && tmp != null && packetIn.getChatComponent().getString().contains(tmp))
+    		return;
+
+    	if (mc.vrSettings.chatNotifications > 0) {
+    		if (mc.vrSettings.chatNotifications == VRSettings.CHAT_NOTIFICATIONS_HAPTIC ||
+    				mc.vrSettings.chatNotifications == VRSettings.CHAT_NOTIFICATIONS_BOTH)
+    			if(mc.vrSettings.seated == false) 
+    				MCOpenVR.triggerHapticPulse(ControllerType.LEFT, 0.2f, 1000, 1);
+
+    		if (mc.vrSettings.chatNotifications == VRSettings.CHAT_NOTIFICATIONS_SOUND ||
+    				mc.vrSettings.chatNotifications == VRSettings.CHAT_NOTIFICATIONS_BOTH) {
+    			Vector3d p = mc.vrPlayer.vrdata_world_pre.getController(1).getPosition();
+    			mc.world.playSound(p.getX(), p.getY(), p.getZ(), 
+    					Registry.SOUND_EVENT.getOrDefault(new ResourceLocation(mc.vrSettings.chatNotificationSound)), SoundCategory.NEUTRAL, 
+    					0.3f, 0.1f, false);
+    		}
+    	}
     }
 
     /**
@@ -1218,7 +1278,10 @@
 
                     if (entity1 == this.client.player && !flag)
                     {
-                        this.client.ingameGUI.setOverlayMessage(new TranslationTextComponent("mount.onboard", this.client.gameSettings.keyBindSneak.func_238171_j_()), false);
+                    	//Vivecraft - use key name, not keyboard key
+                        this.client.ingameGUI.setOverlayMessage(new TranslationTextComponent("mount.onboard", this.client.gameSettings.keyBindSneak.getKeyDescription()), false);
+                        //
+                        this.client.gameSettings.keyBindSneak.func_238171_j_(); // fuck you randompatches
                     }
                 }
             }
@@ -1320,6 +1383,10 @@
             this.world.setScoreboard(scoreboard);
             this.client.loadWorld(this.world);
             this.client.displayGuiScreen(new DownloadTerrainScreen());
+            //VIVECRAFT
+            NetworkHelper.resetServerSettings();
+            NetworkHelper.sendVersionInfo();
+            //
         }
 
         this.world.removeAllEntities();
@@ -1344,9 +1411,14 @@
 
         clientplayerentity1.preparePlayerToSpawn();
         clientplayerentity1.setServerBrand(s);
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerRespawn, this.client.playerController, clientplayerentity, clientplayerentity1, clientplayerentity1.connection.getNetworkManager());
+        //
         this.world.addPlayer(i, clientplayerentity1);
         clientplayerentity1.rotationYaw = -180.0F;
-        clientplayerentity1.movementInput = new MovementInputFromOptions(this.client.gameSettings);
+        //Vivecraft
+        clientplayerentity1.movementInput = new VivecraftMovementInput(this.client.gameSettings);
+        //
         this.client.playerController.setPlayerCapabilities(clientplayerentity1);
         clientplayerentity1.setReducedDebug(clientplayerentity.hasReducedDebug());
         clientplayerentity1.setShowDeathScreen(clientplayerentity.isShowDeathScreen());
@@ -1368,6 +1440,7 @@
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         Explosion explosion = new Explosion(this.client.world, (Entity)null, packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getStrength(), packetIn.getAffectedBlockPositions());
         explosion.doExplosionB(true);
+        this.client.hapticTracker.handleExplode(packetIn);
         this.client.player.setMotion(this.client.player.getMotion().add((double)packetIn.getMotionX(), (double)packetIn.getMotionY(), (double)packetIn.getMotionZ()));
     }
 
@@ -1454,7 +1527,7 @@
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         Container container = null;
-        PlayerEntity playerentity = this.client.player;
+        ClientPlayerEntity playerentity = this.client.player;
 
         if (packetIn.getWindowId() == 0)
         {
@@ -1469,6 +1542,9 @@
         {
             this.sendPacket(new CConfirmTransactionPacket(packetIn.getWindowId(), packetIn.getActionNumber(), true));
         }
+        
+        playerentity.confirmTransaction(packetIn.getActionNumber(),packetIn.getWindowId(),packetIn.wasAccepted());
+
     }
 
     /**
@@ -1521,7 +1597,15 @@
         if (i == 1 && tileentity instanceof MobSpawnerTileEntity || flag || i == 3 && tileentity instanceof BeaconTileEntity || i == 4 && tileentity instanceof SkullTileEntity || i == 6 && tileentity instanceof BannerTileEntity || i == 7 && tileentity instanceof StructureBlockTileEntity || i == 8 && tileentity instanceof EndGatewayTileEntity || i == 9 && tileentity instanceof SignTileEntity || i == 11 && tileentity instanceof BedTileEntity || i == 5 && tileentity instanceof ConduitTileEntity || i == 12 && tileentity instanceof JigsawTileEntity || i == 13 && tileentity instanceof CampfireTileEntity || i == 14 && tileentity instanceof BeehiveTileEntity)
         {
             tileentity.read(this.client.world.getBlockState(blockpos), packetIn.getNbtCompound());
-        }
+        }    		 else {
+    			//Forge
+    			if(tileentity == null) {
+    				LOGGER.error("Received invalid update packet for null tile entity at {} with data: {}", packetIn.getPos(), packetIn.getNbtCompound());
+    				return;
+    			}
+    			Reflector.call(tileentity, Reflector.IForgeTileEntity_onDataPacket, netManager, packetIn);
+    			//
+            }
 
         if (flag && this.client.currentScreen instanceof CommandBlockScreen)
         {
@@ -1783,6 +1867,9 @@
         clientrecipebook.func_243196_a(this.recipeManager.getRecipes());
         clientrecipebook.getRecipes().forEach(imutablesearchtree::func_217872_a);
         imutablesearchtree.recalculate();
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_onRecipesUpdated, this.recipeManager);
+        //
     }
 
     public void handlePlayerLook(SPlayerLookPacket packetIn)
@@ -1886,7 +1973,7 @@
 
         if (entity instanceof LivingEntity)
         {
-            Effect effect = Effect.get(packetIn.getEffectId());
+            Effect effect = Effect.get(packetIn.getEffectId() & 0xFF); //Forge FF
 
             if (effect != null)
             {
@@ -1899,10 +1986,25 @@
 
     public void handleTags(STagsListPacket packetIn)
     {
-        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
-        ITagCollectionSupplier itagcollectionsupplier = packetIn.getTags();
-        Multimap<ResourceLocation, ResourceLocation> multimap = TagRegistryManager.validateTags(itagcollectionsupplier);
+    	PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
+    	ITagCollectionSupplier itagcollectionsupplier = packetIn.getTags();
 
+    	//Forge
+    	Multimap<ResourceLocation, ResourceLocation> multimap;
+    	boolean vanillaConnection = false;
+    	if(Reflector.NetworkHooks_isVanillaConnection.exists()) {
+    		vanillaConnection = Reflector.callBoolean(Reflector.NetworkHooks_isVanillaConnection, netManager);
+    		if(vanillaConnection) {
+    			multimap =  TagRegistryManager.validateTags((ITagCollectionSupplier) Reflector.call(Reflector.ForgeTagHandler_withNoCustom, itagcollectionsupplier));
+    		}
+    		else {
+    			multimap = (Multimap<ResourceLocation, ResourceLocation>) Reflector.call(Reflector.TagRegistryManager_validateVanillaTags, itagcollectionsupplier);
+    		}
+    	} else {
+            multimap = TagRegistryManager.validateTags(itagcollectionsupplier);
+    	}       
+        //
+    	
         if (!multimap.isEmpty())
         {
             LOGGER.warn("Incomplete server tags, disconnecting. Missing: {}", (Object)multimap);
@@ -1910,6 +2012,13 @@
         }
         else
         {
+        	//Forge
+        	if(Reflector.ForgeTagHandler_resetCachedTagCollections.exists()) {
+        		Reflector.call(Reflector.ForgeTagHandler_resetCachedTagCollections, true, vanillaConnection);
+        		itagcollectionsupplier = (ITagCollectionSupplier) Reflector.call(Reflector.ITagCollectionSupplier_reinjectOptionalTags, itagcollectionsupplier);
+        	}
+        	//
+
             this.networkTagManager = itagcollectionsupplier;
 
             if (!this.netManager.isLocalChannel())
@@ -1917,7 +2026,7 @@
                 itagcollectionsupplier.updateTags();
             }
 
-            this.client.getSearchTree(SearchTreeManager.TAGS).recalculate();
+            this.client.getSearchTree(SearchTreeManager.TAGS).recalculate();      
         }
     }
 
@@ -2280,7 +2389,7 @@
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         ResourceLocation resourcelocation = packetIn.getChannelName();
         PacketBuffer packetbuffer = null;
-
+        boolean release = true;
         try
         {
             packetbuffer = packetIn.getBufferData();
@@ -2553,14 +2662,125 @@
                 int l5 = packetbuffer.readInt();
                 this.client.debugRenderer.field_229018_q_.func_229022_a_(blockpos8, l3, s10, l5);
             }
+    		else if (resourcelocation.getNamespace().equalsIgnoreCase("vivecraft"))
+    		{ 			
+    			// VIVE START - server told us that it has this mod too, allow extended reach, etc.
+    			if (resourcelocation.getPath().equalsIgnoreCase("data"))
+    			{ 
+
+    				byte db = packetbuffer.readByte();
+    				PacketDiscriminators dis = PacketDiscriminators.values()[db];
+
+    				switch (dis){
+    				case VERSION:
+    					String v = packetbuffer.readString(1024);
+    					this.client.vrPlayer.setTeleportSupported(true);
+    					this.client.vrPlayer.teleportWarningTimer = -1;
+    					if (!NetworkHelper.displayedChatMessage) {
+    					    NetworkHelper.displayedChatMessage = true;
+                            this.client.ingameGUI.getChatGUI().printChatMessage(new TranslationTextComponent("vivecraft.messages.serverplugin", v));
+                        }
+    					if(Minecraft.getInstance().vrSettings.manualCalibration == -1 && ! Minecraft.getInstance().vrSettings.seated)
+    						this.client.ingameGUI.getChatGUI().printChatMessage(new TranslationTextComponent("vivecraft.messages.calibrateheight"));
+    					break;
+    				case REQUESTDATA:
+    					NetworkHelper.serverWantsData = true;
+    					break;
+    				case CLIMBING:
+    					NetworkHelper.serverAllowsClimbey = packetbuffer.readBoolean();
+    					if (packetbuffer.readableBytes() > 0) {
+                            Minecraft.getInstance().climbTracker.serverblockmode = packetbuffer.readByte();
+                            Minecraft.getInstance().climbTracker.blocklist.clear();
+                            while (packetbuffer.readableBytes() > 0) {
+                                String name = packetbuffer.readString(16384);
+                                Block block = Registry.BLOCK.getOrDefault(new ResourceLocation(name));
+                                if (block != null)
+                                    Minecraft.getInstance().climbTracker.blocklist.add(block);
+                            }
+                        }
+    					break;
+    				case TELEPORT:
+    					NetworkHelper.serverSupportsDirectTeleport = true;
+    					break;
+    				case UBERPACKET:
+    					Long hi = packetbuffer.readLong();
+    					Long low = packetbuffer.readLong();
+    					byte[] hmd = new byte[29];
+    					byte[] c0 = new byte[29];
+    					byte[] c1 = new byte[29];
+    					packetbuffer.readBytes(29).getBytes(0, hmd);
+    					packetbuffer.readBytes(29).getBytes(0, c0);
+    					packetbuffer.readBytes(29).getBytes(0, c1);
+    					UUID u = new UUID(hi, low);
+
+    					float worldscale = 1f;
+    					float heightscale = 1f;
+    					if (packetbuffer.isReadable())
+    						worldscale = packetbuffer.readFloat();
+    					if (packetbuffer.isReadable())
+    						heightscale = packetbuffer.readFloat();		
+
+    					PlayerModelController.getInstance().Update(u, hmd, c0, c1, worldscale, heightscale);    
+    						
+    					break;
+    				case SETTING_OVERRIDE:
+    				    // TODO: Placeholder code until proper framework is implemented
+    				    while (packetbuffer.readableBytes() > 0) {
+    				        String settingName = packetbuffer.readString(16384);
+    				        String value = packetbuffer.readString(16384);
+    				        String[] split = settingName.split("\\.", 2);
+
+    				        if (client.vrSettings.overrides.hasSetting(split[0])) {
+                                VRSettings.ServerOverrides.Setting setting = client.vrSettings.overrides.getSetting(split[0]);
+
+                                try {
+                                    if (split.length > 1) {
+                                        switch (split[1]) {
+                                            case "min":
+                                                setting.setValueMin(Float.parseFloat(value));
+                                                break;
+                                            case "max":
+                                                setting.setValueMax(Float.parseFloat(value));
+                                                break;
+                                        }
+                                    } else {
+                                        Object origValue = setting.getOriginalValue();
+
+                                        if (origValue instanceof Boolean)
+                                            setting.setValue(value.equals("true"));
+                                        else if (origValue instanceof Integer || origValue instanceof Byte || origValue instanceof Short)
+                                            setting.setValue(Integer.parseInt(value));
+                                        else if (origValue instanceof Float || origValue instanceof Double)
+                                            setting.setValue(Float.parseFloat(value));
+                                        else
+                                            setting.setValue(value);
+                                    }
+                                    System.out.println("Server setting override: " + settingName + " = " + value);
+                                } catch (Exception e) {
+                                    e.printStackTrace();
+                                }
+                            }
+                        }
+                        break;
+                    case CRAWL:
+                        NetworkHelper.serverAllowsCrawling = true;
+                        break;
+    				default:
+    					break;
+    				}
+    			}
+    		}
+    		// VIVE END
             else
             {
-                LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            	release = false;
+                if (!Reflector.callBoolean(Reflector.NetworkHooks_onCustomPayload, packetIn, this.netManager))               	
+                	LOGGER.warn("Unknown custom packet identifier: {}", (Object)resourcelocation);
             }
         }
         finally
         {
-            if (packetbuffer != null)
+            if (packetbuffer != null && release)
             {
                 packetbuffer.release();
             }
@@ -2955,4 +3175,14 @@
     {
         return this.field_239163_t_;
     }
+    //VIVECRAFT Additions
+    boolean tryParseInt(String value) {  
+    	try {  
+    		Integer.parseInt(value);  
+    		return true;  
+    	} catch (NumberFormatException e) {  
+    		return false;  
+    	}  
+    }
+    //
 }
