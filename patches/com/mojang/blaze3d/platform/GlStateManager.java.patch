--- a/com/mojang/blaze3d/platform/GlStateManager.java
+++ b/com/mojang/blaze3d/platform/GlStateManager.java
@@ -23,6 +23,7 @@
 import net.optifine.shaders.Shaders;
 import net.optifine.util.LockCounter;
 import org.lwjgl.opengl.ARBCopyBuffer;
+import org.lwjgl.opengl.ARBDrawBuffersBlend;
 import org.lwjgl.opengl.ARBFramebufferObject;
 import org.lwjgl.opengl.EXTFramebufferBlit;
 import org.lwjgl.opengl.EXTFramebufferObject;
@@ -33,6 +34,7 @@
 import org.lwjgl.opengl.GL20;
 import org.lwjgl.opengl.GL30;
 import org.lwjgl.opengl.GL31;
+import org.lwjgl.opengl.GL42;
 import org.lwjgl.opengl.GLCapabilities;
 import org.lwjgl.system.MemoryUtil;
 
@@ -52,7 +54,7 @@
         return new GlStateManager.BooleanState[p_lambda$static$2_0_];
     });
     private static final GlStateManager.ColorMaterialState COLOR_MATERIAL = new GlStateManager.ColorMaterialState();
-    private static final GlStateManager.BlendState BLEND = new GlStateManager.BlendState();
+    public static final GlStateManager.BlendState BLEND = new GlStateManager.BlendState();
     private static final GlStateManager.DepthState DEPTH = new GlStateManager.DepthState();
     private static final GlStateManager.FogState FOG = new GlStateManager.FogState();
     private static final GlStateManager.CullState CULL = new GlStateManager.CullState();
@@ -99,6 +101,9 @@
     public static final int GL_TEXTURE0 = 33984;
     public static final int GL_TEXTURE1 = 33985;
     public static final int GL_TEXTURE2 = 33986;
+    private static int framebufferRead;
+    private static int framebufferDraw;
+    private static final int[] IMAGE_TEXTURES = new int[8];
 
     @Deprecated
     public static void pushLightingAttributes()
@@ -351,6 +356,12 @@
     {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
 
+        // VIVECRAFT: correct bad blend function that trashes alpha channel
+        if (srcFactor == SourceFactor.SRC_ALPHA.param && dstFactor == DestFactor.ONE_MINUS_SRC_ALPHA.param && srcFactorAlpha == SourceFactor.ONE.param && dstFactorAlpha == DestFactor.ZERO.param) {
+            dstFactorAlpha = DestFactor.ONE_MINUS_SRC_ALPHA.param;
+        }
+        //
+
         if (blendLock.isLocked())
         {
             blendLockState.setFactors(srcFactor, dstFactor, srcFactorAlpha, dstFactorAlpha);
@@ -681,6 +692,36 @@
     {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
 
+        if (target == 36160)
+        {
+            if (framebufferRead == framebufferIn && framebufferDraw == framebufferIn)
+            {
+                return;
+            }
+
+            framebufferRead = framebufferIn;
+            framebufferDraw = framebufferIn;
+        }
+        else if (target == 36008)
+        {
+            if (framebufferRead == framebufferIn)
+            {
+                return;
+            }
+
+            framebufferRead = framebufferIn;
+        }
+
+        if (target == 36009)
+        {
+            if (framebufferDraw == framebufferIn)
+            {
+                return;
+            }
+
+            framebufferDraw = framebufferIn;
+        }
+
         switch (fboMode)
         {
             case BASE:
@@ -1030,7 +1071,13 @@
         getMatrix(2982, MATRIX_BUFFER);
         multMatrix(MATRIX_BUFFER);
     }
-
+    
+    public static void mulTextureByModelView()
+    {
+        getMatrix(2982, MATRIX_BUFFER);
+        multMatrix(MATRIX_BUFFER);
+    }
+    
     @Deprecated
     public static void enableFog()
     {
@@ -1342,6 +1389,14 @@
 
         if (textureIn != 0)
         {
+            for (int i = 0; i < IMAGE_TEXTURES.length; ++i)
+            {
+                if (IMAGE_TEXTURES[i] == textureIn)
+                {
+                    IMAGE_TEXTURES[i] = 0;
+                }
+            }
+
             GL11.glDeleteTextures(textureIn);
 
             for (GlStateManager.TextureState glstatemanager$texturestate : TEXTURES)
@@ -1556,7 +1611,18 @@
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
         GL11.glGetFloatv(pname, params);
     }
-
+    
+    //temp
+    public static Matrix4f getMatrix4f(int p_getMatrix4f_0_)
+    {
+        GL11.glGetFloatv(p_getMatrix4f_0_, MATRIX_BUFFER);
+        MATRIX_BUFFER.rewind();
+        Matrix4f matrix4f = new Matrix4f();
+        matrix4f.read(MATRIX_BUFFER);
+        MATRIX_BUFFER.rewind();
+        return matrix4f;
+    }
+    
     @Deprecated
     public static void ortho(double left, double right, double bottom, double top, double zNear, double zFar)
     {
@@ -1809,6 +1875,11 @@
         }
     }
 
+    public static void genTextures(IntBuffer p_genTextures_0_)
+    {
+        GL11.glGenTextures(p_genTextures_0_);
+    }
+
     public static void deleteTextures(IntBuffer p_deleteTextures_0_)
     {
         ((Buffer)p_deleteTextures_0_).rewind();
@@ -2058,6 +2129,75 @@
         clientStateLocked = false;
     }
 
+    public static void readPixels(int p_readPixels_0_, int p_readPixels_1_, int p_readPixels_2_, int p_readPixels_3_, int p_readPixels_4_, int p_readPixels_5_, long p_readPixels_6_)
+    {
+        GL11.glReadPixels(p_readPixels_0_, p_readPixels_1_, p_readPixels_2_, p_readPixels_3_, p_readPixels_4_, p_readPixels_5_, p_readPixels_6_);
+    }
+
+    public static int getFramebufferRead()
+    {
+        return framebufferRead;
+    }
+
+    public static int getFramebufferDraw()
+    {
+        return framebufferDraw;
+    }
+
+    public static void applyCurrentBlend()
+    {
+        if (BLEND.blend.currentState)
+        {
+            GL11.glEnable(GL11.GL_BLEND);
+        }
+        else
+        {
+            GL11.glDisable(GL11.GL_BLEND);
+        }
+
+        GL14.glBlendFuncSeparate(BLEND.srcFactorRgb, BLEND.dstFactorRgb, BLEND.srcFactorAlpha, BLEND.dstFactorAlpha);
+    }
+
+    public static void setBlendsIndexed(GlBlendState[] p_setBlendsIndexed_0_)
+    {
+        if (p_setBlendsIndexed_0_ != null)
+        {
+            for (int i = 0; i < p_setBlendsIndexed_0_.length; ++i)
+            {
+                GlBlendState glblendstate = p_setBlendsIndexed_0_[i];
+
+                if (glblendstate != null)
+                {
+                    if (glblendstate.isEnabled())
+                    {
+                        GL30.glEnablei(3042, i);
+                    }
+                    else
+                    {
+                        GL30.glDisablei(3042, i);
+                    }
+
+                    ARBDrawBuffersBlend.glBlendFuncSeparateiARB(i, glblendstate.getSrcFactor(), glblendstate.getDstFactor(), glblendstate.getSrcFactorAlpha(), glblendstate.getDstFactorAlpha());
+                }
+            }
+        }
+    }
+
+    public static void bindImageTexture(int p_bindImageTexture_0_, int p_bindImageTexture_1_, int p_bindImageTexture_2_, boolean p_bindImageTexture_3_, int p_bindImageTexture_4_, int p_bindImageTexture_5_, int p_bindImageTexture_6_)
+    {
+        if (p_bindImageTexture_0_ >= 0 && p_bindImageTexture_0_ < IMAGE_TEXTURES.length)
+        {
+            if (IMAGE_TEXTURES[p_bindImageTexture_0_] == p_bindImageTexture_1_)
+            {
+                return;
+            }
+
+            IMAGE_TEXTURES[p_bindImageTexture_0_] = p_bindImageTexture_1_;
+        }
+
+        GL42.glBindImageTexture(p_bindImageTexture_0_, p_bindImageTexture_1_, p_bindImageTexture_2_, p_bindImageTexture_3_, p_bindImageTexture_4_, p_bindImageTexture_5_, p_bindImageTexture_6_);
+    }
+
     @Deprecated
     static class AlphaState
     {
@@ -2070,7 +2210,7 @@
         }
     }
 
-    static class BlendState
+    public static class BlendState
     {
         public final GlStateManager.BooleanState blend = new GlStateManager.BooleanState(3042);
         public int srcFactorRgb = 1;
@@ -2124,6 +2264,7 @@
     }
 
     @Deprecated
+	public
     static class Color
     {
         public float red = 1.0F;
